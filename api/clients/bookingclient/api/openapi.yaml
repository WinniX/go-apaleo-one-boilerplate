openapi: 3.0.1
info:
  description: Resources and methods to manage guest journeys.
  title: apaleo Booking API
  version: v1
servers:
- url: /
paths:
  /booking/v1/blocks:
    get:
      description: 'Returns a list of all blocks, filtered by the specified parameters.
        If no parameters are set, returns the entire list.<br>You must have at least
        one of these scopes: ''blocks.read, reservations.read, reservations.manage''.'
      operationId: BookingBlocksGet
      parameters:
      - description: Return blocks for the specific group
        in: query
        name: groupId
        schema:
          type: string
      - description: Return blocks filtered by properties
        explode: false
        in: query
        name: propertyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks filtered by statuses
        explode: false
        in: query
        name: status
        schema:
          items:
            enum:
            - Tentative
            - Definite
            - Canceled
            type: string
            x-ms-enum:
              name: BlockStatus
              modelAsString: false
          type: array
        style: form
      - description: Return blocks with any of the specified unit groups
        explode: false
        in: query
        name: unitGroupIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks with any of the specified rate plans
        explode: false
        in: query
        name: ratePlanIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks with any of the specified time slice definitions
        explode: false
        in: query
        name: timeSliceDefinitionIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks with any of the specified unit group types
        explode: false
        in: query
        name: unitGroupTypes
        schema:
          items:
            enum:
            - BedRoom
            - MeetingRoom
            - EventSpace
            - ParkingLot
            - Other
            type: string
            x-ms-enum:
              name: UnitGroupType
              modelAsString: false
          type: array
        style: form
      - description: The time slice template, defaults to 'over night'
        in: query
        name: timeSliceTemplate
        schema:
          enum:
          - DayUse
          - OverNight
          type: string
          x-ms-enum:
            name: TimeSliceTemplate
            modelAsString: false
        x-ms-enum:
          name: TimeSliceTemplate
          modelAsString: false
      - description: "The start of the time range. All blocks that are overlapping\
          \ with the interval specified by from and to\r\nwill be returned<br />A\
          \ date and time (without fractional second part) in UTC or with UTC offset\
          \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: "The end of the time range. All blocks that are overlapping with\
          \ the interval specified by from and to\r\nwill be returned<br />A date\
          \ and time (without fractional second part) in UTC or with UTC offset as\
          \ defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: to
        schema:
          format: date-time
          type: string
      - description: Page number, starting from 1 and defaulting to 1. Results in
          204 if there are no items on that page.
        in: query
        name: pageNumber
        schema:
          default: 1
          type: integer
      - description: Page size. If this is not set, the pageNumber will be ignored
          and all values returned.
        in: query
        name: pageSize
        schema:
          default: 100
          type: integer
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: actions, timeSlices. All other values will
          be silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - actions
            - timeSlices
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockListModel'
          description: ""
        "204":
          content: {}
          description: No blocks found.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a list of blocks
      tags:
      - Block
    post:
      description: '<br>You must have at least one of these scopes: ''blocks.create,
        reservations.manage''.'
      operationId: BookingBlocksPost
      parameters:
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockModel'
        description: The details for the block you want to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockCreatedModel'
          description: The block was created successfully.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.create
        - reservations.manage
        - admin
      summary: Creates a block
      tags:
      - Block
      x-codegen-request-body-name: body
  /booking/v1/blocks/$count:
    get:
      description: 'Returns number of blocks matching the filter criteria<br>You must
        have at least one of these scopes: ''blocks.read, reservations.read, reservations.manage''.'
      operationId: BookingBlocks$countGet
      parameters:
      - description: Return blocks for the specific group
        in: query
        name: groupId
        schema:
          type: string
      - description: Return blocks filtered by properties
        explode: false
        in: query
        name: propertyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks filtered by statuses
        explode: false
        in: query
        name: status
        schema:
          items:
            enum:
            - Tentative
            - Definite
            - Canceled
            type: string
            x-ms-enum:
              name: BlockStatus
              modelAsString: false
          type: array
        style: form
      - description: Return blocks with any of the specified unit groups
        explode: false
        in: query
        name: unitGroupIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks with any of the specified rate plans
        explode: false
        in: query
        name: ratePlanIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks with any of the specified time slice definitions
        explode: false
        in: query
        name: timeSliceDefinitionIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return blocks with any of the specified unit group types
        explode: false
        in: query
        name: unitGroupTypes
        schema:
          items:
            enum:
            - BedRoom
            - MeetingRoom
            - EventSpace
            - ParkingLot
            - Other
            type: string
            x-ms-enum:
              name: UnitGroupType
              modelAsString: false
          type: array
        style: form
      - description: The time slice template, defaults to 'over night'
        in: query
        name: timeSliceTemplate
        schema:
          enum:
          - DayUse
          - OverNight
          type: string
          x-ms-enum:
            name: TimeSliceTemplate
            modelAsString: false
        x-ms-enum:
          name: TimeSliceTemplate
          modelAsString: false
      - description: "The start of the time range. All blocks that are overlapping\
          \ with the interval specified by from and to\r\nwill be returned<br />A\
          \ date and time (without fractional second part) in UTC or with UTC offset\
          \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: "The end of the time range. All blocks that are overlapping with\
          \ the interval specified by from and to\r\nwill be returned<br />A date\
          \ and time (without fractional second part) in UTC or with UTC offset as\
          \ defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: to
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns number of blocks
      tags:
      - Block
  /booking/v1/blocks/{id}:
    delete:
      description: "Use this call to delete a block. This is only possible as long\
        \ as no reservation was picked up yet even if all of\r\nthem are canceled<br>You\
        \ must have at least one of these scopes: 'blocks.manage, reservations.manage'."
      operationId: BookingBlocksByIdDelete
      parameters:
      - description: The id of the block.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deletion of the block was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Delete a specific block
      tags:
      - Block
    get:
      description: 'Retrieves a block, specified by its ID.<br>You must have at least
        one of these scopes: ''blocks.read, reservations.read, reservations.manage''.'
      operationId: BookingBlocksByIdGet
      parameters:
      - description: Id of the block to be retrieved.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: actions, timeSlices. All other values will
          be silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - actions
            - timeSlices
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a specific block.
      tags:
      - Block
    head:
      description: 'Check if a block exists by id<br>You must have at least one of
        these scopes: ''blocks.read, reservations.read, reservations.manage''.'
      operationId: BookingBlocksByIdHead
      parameters:
      - description: The id of the block.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: The block exists.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Check if a block exists
      tags:
      - Block
    patch:
      description: 'You can replace From, To, GrossDailyRate and BlockedUnits<br>You
        must have at least one of these scopes: ''blocks.manage, reservations.manage''.'
      operationId: BookingBlocksByIdPatch
      parameters:
      - description: Id of the block to be modified.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: 'Define the list of operations to be applied to the resource.
                Learn more about JSON Patch here: http://jsonpatch.com/.'
              items:
                $ref: '#/components/schemas/Operation'
              type: array
        description: 'Define the list of operations to be applied to the resource.
          Learn more about JSON Patch here: http://jsonpatch.com/.'
        required: true
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Allows to modify the block
      tags:
      - Block
      x-codegen-request-body-name: body
  /booking/v1/block-actions/{id}/confirm:
    put:
      description: "Confirm a specific block which is in status 'Tentative'.\r\nThis\
        \ changes the status to 'Definite'.<br>You must have at least one of these\
        \ scopes: 'blocks.manage, reservations.manage'."
      operationId: BookingBlock-actionsByIdConfirmPut
      parameters:
      - description: Id of the block that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Confirmation of the block was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Confirm a block.
      tags:
      - BlockActions
  /booking/v1/block-actions/{id}/release:
    put:
      description: "Release a specific block which is in status 'Definite'.\r\nThis\
        \ changes the status to 'Tentative'.<br>You must have at least one of these\
        \ scopes: 'blocks.manage, reservations.manage'."
      operationId: BookingBlock-actionsByIdReleasePut
      parameters:
      - description: Id of the block that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Release of the block was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Release a block.
      tags:
      - BlockActions
  /booking/v1/block-actions/{id}/cancel:
    put:
      description: "Cancel a specific block which is in status 'Definite' or 'Tentative'.\r\
        \nThis changes the status to 'Canceled'.<br>You must have at least one of\
        \ these scopes: 'blocks.manage, reservations.manage'."
      operationId: BookingBlock-actionsByIdCancelPut
      parameters:
      - description: Id of the block that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Cancellation of the block was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Cancel a block.
      tags:
      - BlockActions
  /booking/v1/block-actions/{id}/wash:
    put:
      description: "Wash a specific block which is in status 'Definite'.\r\nThis releases\
        \ all unpicked units.<br>You must have at least one of these scopes: 'blocks.manage,\
        \ reservations.manage'."
      operationId: BookingBlock-actionsByIdWashPut
      parameters:
      - description: Id of the block that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Wash of the block was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Wash a block.
      tags:
      - BlockActions
  /booking/v1/block-actions/{id}/amend:
    put:
      description: 'Use this call to modify a block.<br>You must have at least one
        of these scopes: ''blocks.manage, reservations.manage''.'
      operationId: BookingBlock-actionsByIdAmendPut
      parameters:
      - description: Id of the block to be modified.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceBlockModel'
        description: The definition of the block.
        required: true
      responses:
        "204":
          content: {}
          description: Replace of the block was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - blocks.manage
        - reservations.manage
        - admin
      summary: Allow to modify a block
      tags:
      - BlockActions
      x-codegen-request-body-name: body
  /booking/v1/bookings:
    get:
      description: 'Returns a list of all bookings, filtered by the specified parameters.
        If no parameters are set, returns the entire list.<br>You must have at least
        one of these scopes: ''reservations.read, reservations.manage''.'
      operationId: BookingBookingsGet
      parameters:
      - description: Filter result by reservation id. The result set will contain
          all bookings having reservations with the specified id
        in: query
        name: reservationId
        schema:
          type: string
      - description: Filter result by group id. The result set will contain all bookings
          having groups with the specified id
        in: query
        name: groupId
        schema:
          type: string
      - description: Filter result by the channel code. The resul set will contain
          all bookings having reservations with the specified channel code
        explode: false
        in: query
        name: channelCode
        schema:
          items:
            enum:
            - Direct
            - BookingCom
            - Ibe
            - ChannelManager
            - Expedia
            - Homelike
            type: string
            x-ms-enum:
              name: ChannelCode
              modelAsString: false
          type: array
        style: form
      - description: Filter result by the external code. The result set will contain
          all bookings having reservations with external code starting with provided
          value
        in: query
        name: externalCode
        schema:
          type: string
      - description: "This will filter all bookings for the provided free text. Currently\
          \ it only looks up if either the lastname, firstname, email or company name\
          \ of the booker\r\ncontains one of the provided values"
        in: query
        name: textSearch
        schema:
          type: string
      - description: Page number, starting from 1 and defaulting to 1. Results in
          204 if there are no items on that page.
        in: query
        name: pageNumber
        schema:
          default: 1
          type: integer
      - description: Page size. If this is not set, the pageNumber will be ignored
          and all values returned.
        in: query
        name: pageSize
        schema:
          default: 100
          type: integer
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: property, unitGroup, ratePlan, services,
          reservations. All other values will be silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - property
            - unitGroup
            - ratePlan
            - services
            - reservations
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingListModel'
          description: ""
        "204":
          content: {}
          description: No bookings found.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a list of all bookings, filtered by the specified parameters.
      tags:
      - Booking
    post:
      description: 'Creates a booking taking a list of reservations as input<br>You
        must have at least one of these scopes: ''reservations.create, reservations.manage''.'
      operationId: BookingBookingsPost
      parameters:
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingModel'
        description: The list of reservations you want to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreatedModel'
          description: All new reservations were created.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.create
        - reservations.manage
        - admin
      summary: Creates a booking for one or more reservations.
      tags:
      - Booking
      x-codegen-request-body-name: body
  /booking/v1/bookings/$force:
    post:
      description: 'Creates a booking taking a list of reservations as input<br>You
        must have at least one of these scopes: ''reservations.force-create, reservations.force-manage''.'
      operationId: BookingBookings$forcePost
      parameters:
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingModel'
        description: The list of reservations you want to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreatedModel'
          description: All new reservations were created.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.force-create
        - reservations.force-manage
        - admin
      summary: Creates a booking for one or more reservations regardless of availability
        or restrictions.
      tags:
      - Booking
      x-codegen-request-body-name: body
  /booking/v1/bookings/{id}/reservations:
    post:
      description: 'Creates new reservations and adds them to an existing booking
        taking a list of reservations as input<br>You must have at least one of these
        scopes: ''reservations.create, reservations.manage''.'
      operationId: BookingBookingsByIdReservationsPost
      parameters:
      - description: Id of the booking the reservations should be attached to.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReservationsModel'
        description: The list of reservations you want to add.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsCreatedModel'
          description: All new reservations were created and added to the booking.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.create
        - reservations.manage
        - admin
      summary: Add one or multiple reservations to an existing booking.
      tags:
      - Booking
      x-codegen-request-body-name: body
  /booking/v1/bookings/{id}/reservations/$force:
    post:
      description: 'Creates new reservations and adds them to an existing booking
        taking a list of reservations as input<br>You must have at least one of these
        scopes: ''reservations.force-create, reservations.force-manage''.'
      operationId: BookingBookingsByIdReservations$forcePost
      parameters:
      - description: Id of the booking the reservations should be attached to.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReservationsModel'
        description: The list of reservations you want to add.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsCreatedModel'
          description: All new reservations were created and added to the booking.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.force-create
        - reservations.force-manage
        - admin
      summary: Add one or multiple reservations to an existing booking regardless
        of availability or restrictions.
      tags:
      - Booking
      x-codegen-request-body-name: body
  /booking/v1/bookings/{id}:
    get:
      description: 'Retrieves a booking with all its reservations.<br>You must have
        at least one of these scopes: ''reservations.read, reservations.manage''.'
      operationId: BookingBookingsByIdGet
      parameters:
      - description: Id of the booking to be retrieved.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: property, unitGroup, ratePlan, services,
          reservations, propertyValues. All other values will be silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - property
            - unitGroup
            - ratePlan
            - services
            - reservations
            - propertyValues
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a specific booking.
      tags:
      - Booking
    patch:
      description: "Here is the list of operations that are currently allowed:\r\n\
        - Add, replace and remove PaymentAccount\r\n- Add, replace and remove Comment\r\
        \n- Add, replace and remove BookerComment\r\n- Copy PaymentAccount, Comment\
        \ and BookerComment from the booking to any reservation, or the other way\
        \ around\r\n- Replace Booker<br>You must have this scope: 'reservations.manage'."
      operationId: BookingBookingsByIdPatch
      parameters:
      - description: Id of the booking to be modified.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: 'Define the list of operations to be applied to the resource.
                Learn more about JSON Patch here: http://jsonpatch.com/.'
              items:
                $ref: '#/components/schemas/Operation'
              type: array
        description: 'Define the list of operations to be applied to the resource.
          Learn more about JSON Patch here: http://jsonpatch.com/.'
        required: true
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Allows to modify certain booking properties
      tags:
      - Booking
      x-codegen-request-body-name: body
  /booking/v1/groups:
    get:
      description: "Returns a list of all group bookings, filtered by the specified\
        \ parameters.\r\nIf no parameters are set, returns the entire list<br>You\
        \ must have at least one of these scopes: 'groups.read, reservations.read,\
        \ reservations.manage'."
      operationId: BookingGroupsGet
      parameters:
      - description: "This will filter all group bookings for the provided free text.\
          \ Currently it only looks up if either the group name, lastname,\r\nfirstname,\
          \ email or company name of the booker contains one of the provided values"
        in: query
        name: textSearch
        schema:
          type: string
      - description: Filter result by requested properties
        explode: false
        in: query
        name: propertyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The start of the time range. All groups that have blocks overlapping\
          \ with the interval specified by from and to\r\nwill be returned<br />A\
          \ date and time (without fractional second part) in UTC or with UTC offset\
          \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: "The end of the time range. All groups that have blocks overlapping\
          \ with the interval specified by from and to\r\nwill be returned<br />A\
          \ date and time (without fractional second part) in UTC or with UTC offset\
          \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: to
        schema:
          format: date-time
          type: string
      - description: Page number, starting from 1 and defaulting to 1. Results in
          204 if there are no items on that page.
        in: query
        name: pageNumber
        schema:
          default: 1
          type: integer
      - description: Page size. If this is not set, the pageNumber will be ignored
          and all values returned.
        in: query
        name: pageSize
        schema:
          default: 100
          type: integer
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: blocks, actions. All other values will be
          silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - blocks
            - actions
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListModel'
          description: ""
        "204":
          content: {}
          description: No group bookings found.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a list of all group bookings, filtered by the specified parameters.
      tags:
      - Group
    post:
      description: '<br>You must have at least one of these scopes: ''groups.create,
        reservations.manage''.'
      operationId: BookingGroupsPost
      parameters:
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupModel'
        description: The details of the group that should be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreatedModel'
          description: A new group booking was created.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.create
        - reservations.manage
        - admin
      summary: Creates a group booking.
      tags:
      - Group
      x-codegen-request-body-name: body
  /booking/v1/groups/{id}:
    delete:
      description: "Use this call to delete a group booking. This is only possible\
        \ as long as no blocks exist that are linked to\r\nthis group booking<br>You\
        \ must have at least one of these scopes: 'groups.manage, reservations.manage'."
      operationId: BookingGroupsByIdDelete
      parameters:
      - description: Id of the group booking to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deletion of the group was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.manage
        - reservations.manage
        - admin
      summary: Delete a certain group booking
      tags:
      - Group
    get:
      description: 'Retrieves a specific group booking with all its related blocks<br>You
        must have at least one of these scopes: ''groups.read, reservations.read,
        reservations.manage''.'
      operationId: BookingGroupsByIdGet
      parameters:
      - description: Id of the group booking to be retrieved.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: blocks, actions. All other values will be
          silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - blocks
            - actions
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a specific group booking.
      tags:
      - Group
    head:
      description: 'Check if a group booking exists by id<br>You must have at least
        one of these scopes: ''groups.read, reservations.read, reservations.manage''.'
      operationId: BookingGroupsByIdHead
      parameters:
      - description: Id of the group booking to be checked for existence.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: The group booking exists.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Check if a certain group booking exists
      tags:
      - Group
    patch:
      description: "Here is the list of operations that are currently allowed:\r\n\
        - Add and replace Name\r\n- Add, replace and remove Comment\r\n- Add, replace\
        \ and remove BookerComment\r\n- Add, replace and remove PaymentAccount\r\n\
        - Add, replace and remove PropertyIds\r\n- Replace Booker<br>You must have\
        \ at least one of these scopes: 'groups.manage, reservations.manage'."
      operationId: BookingGroupsByIdPatch
      parameters:
      - description: Id of the group booking to be modified.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: 'Define the list of operations to be applied to the resource.
                Learn more about JSON Patch here: http://jsonpatch.com/.'
              items:
                $ref: '#/components/schemas/Operation'
              type: array
        description: 'Define the list of operations to be applied to the resource.
          Learn more about JSON Patch here: http://jsonpatch.com/.'
        required: true
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.manage
        - reservations.manage
        - admin
      summary: Allows to modify certain group booking properties
      tags:
      - Group
      x-codegen-request-body-name: body
  /booking/v1/groups/$count:
    get:
      description: 'Returns number of group bookings matching the filter criteria<br>You
        must have at least one of these scopes: ''groups.read, reservations.read,
        reservations.manage''.'
      operationId: BookingGroups$countGet
      parameters:
      - description: "This will filter all group bookings for the provided free text.\
          \ Currently it only looks up if either the group name, lastname,\r\nfirstname,\
          \ email or company name of the booker contains one of the provided values"
        in: query
        name: textSearch
        schema:
          type: string
      - description: Filter result by requested properties
        explode: false
        in: query
        name: propertyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The start of the time range. All groups that have blocks overlapping\
          \ with the interval specified by from and to\r\nwill be returned<br />A\
          \ date and time (without fractional second part) in UTC or with UTC offset\
          \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: "The end of the time range. All groups that have blocks overlapping\
          \ with the interval specified by from and to\r\nwill be returned<br />A\
          \ date and time (without fractional second part) in UTC or with UTC offset\
          \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
        in: query
        name: to
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.read
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns number of group bookings
      tags:
      - Group
  /booking/v1/groups/{id}/reservations:
    post:
      description: 'Creates new reservations and adds them to an existing group booking
        taking a list of reservations as input<br>You must have at least one of these
        scopes: ''groups.manage, reservations.manage''.'
      operationId: BookingGroupsByIdReservationsPost
      parameters:
      - description: Id of the group booking the reservations should be attached to.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Unique key for safely retrying requests without accidentally\
          \ performing the same operation twice. \nWe'll always send back the same\
          \ response for requests made with the same key, \nand keys can't be reused\
          \ with different request parameters. Keys expire after 24 hours."
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickUpReservationsModel'
        description: The list of reservations you want to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsCreatedModel'
          description: All new reservations were created and added to the group booking.
          headers:
            Location:
              description: The location of the created resource.
              schema:
                type: string
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - groups.manage
        - reservations.manage
        - admin
      summary: Add one or multiple reservations to an existing group booking using
        blocked inventory.
      tags:
      - Group
      x-codegen-request-body-name: body
  /booking/v1/offers:
    get:
      description: 'Calculates and returns available offers for a specific property,
        arrival and departure date.<br>You must have at least one of these scopes:
        ''offers.read, reservations.manage''.'
      operationId: BookingOffersGet
      parameters:
      - description: The property ID
        in: query
        name: propertyId
        required: true
        schema:
          type: string
      - description: Date and optional time of arrival<br />Specify either a pure
          date or a date and time (without fractional second part) in UTC or with
          UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: arrival
        required: true
        schema:
          type: string
      - description: Date and optional time of departure. Cannot be more than 5 years
          after arrival.<br />Specify either a pure date or a date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: departure
        required: true
        schema:
          type: string
      - description: The time slice template used to filter the rate plans, defaults
          to 'over night'
        in: query
        name: timeSliceTemplate
        schema:
          enum:
          - DayUse
          - OverNight
          type: string
          x-ms-enum:
            name: TimeSliceTemplate
            modelAsString: false
        x-ms-enum:
          name: TimeSliceTemplate
          modelAsString: false
      - description: Time slice definition IDs, used to filter rate plans
        explode: false
        in: query
        name: timeSliceDefinitionIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Unit group IDs, used to filter rate plans
        explode: false
        in: query
        name: unitGroupIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Unit group types, used to filter rate plans
        explode: false
        in: query
        name: unitGroupTypes
        schema:
          items:
            enum:
            - BedRoom
            - MeetingRoom
            - EventSpace
            - ParkingLot
            - Other
            type: string
            x-ms-enum:
              name: UnitGroupType
              modelAsString: false
          type: array
        style: form
      - description: Channel code, used to filter the rate plans
        in: query
        name: channelCode
        schema:
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        x-ms-enum:
          name: ChannelCode
          modelAsString: false
      - description: The promo code associated with a certain special offer
        in: query
        name: promoCode
        schema:
          type: string
      - description: The code associated with a corporate rate
        in: query
        name: corporateCode
        schema:
          type: string
      - description: The number of adults you want offers for
        in: query
        name: adults
        required: true
        schema:
          format: int32
          type: integer
      - description: The ages of the children you want offers for
        explode: false
        in: query
        name: childrenAges
        schema:
          items:
            format: int32
            type: integer
          type: array
        style: form
      - description: Return also offers that are currently not publicly bookable as
          restrictions are violated. By default only available offers are returned
        in: query
        name: includeUnavailable
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StayOffersModel'
          description: Success.
        "204":
          content: {}
          description: There are no available offers for the specified parameters.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - offers.read
        - reservations.manage
        - admin
      summary: Returns offers for one specific stay.
      tags:
      - Offer
  /booking/v1/rate-plan-offers:
    get:
      description: 'Calculates and returns available offers for a specific rate plan,
        arrival and departure date.<br>You must have at least one of these scopes:
        ''offers.read, reservations.manage''.'
      operationId: BookingRate-plan-offersGet
      parameters:
      - description: The rate plan ID
        in: query
        name: ratePlanId
        required: true
        schema:
          type: string
      - description: Date and optional time of arrival<br />Specify either a pure
          date or a date and time (without fractional second part) in UTC or with
          UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: arrival
        required: true
        schema:
          type: string
      - description: Date and optional time of departure. Cannot be more than 5 years
          after arrival.<br />Specify either a pure date or a date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: departure
        required: true
        schema:
          type: string
      - description: The channel code
        in: query
        name: channelCode
        schema:
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        x-ms-enum:
          name: ChannelCode
          modelAsString: false
      - description: The number of adults you want offers for
        in: query
        name: adults
        required: true
        schema:
          format: int32
          type: integer
      - description: The ages of the children you want offers for
        explode: false
        in: query
        name: childrenAges
        schema:
          items:
            format: int32
            type: integer
          type: array
        style: form
      - description: Return also offers that are currently not publicly bookable as
          restrictions are violated. By default only available offers are returned
        in: query
        name: includeUnavailable
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StayOffersModel'
          description: Success.
        "204":
          content: {}
          description: There are no available offers for the specified parameters.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - offers.read
        - reservations.manage
        - admin
      summary: Returns offers for a specific rate plan.
      tags:
      - Offer
  /booking/v1/service-offers:
    get:
      description: '<br>You must have at least one of these scopes: ''offers.read,
        reservations.manage''.'
      operationId: BookingService-offersGet
      parameters:
      - description: The rate plan ID
        in: query
        name: ratePlanId
        required: true
        schema:
          type: string
      - description: Date and optional time of arrival<br />Specify either a pure
          date or a date and time (without fractional second part) in UTC or with
          UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: arrival
        required: true
        schema:
          type: string
      - description: Date and optional time of departure. Cannot be more than 5 years
          after arrival.<br />Specify either a pure date or a date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: departure
        required: true
        schema:
          type: string
      - description: The channel code used to filter the services
        in: query
        name: channelCode
        schema:
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        x-ms-enum:
          name: ChannelCode
          modelAsString: false
      - description: The number of adults you want offers for
        in: query
        name: adults
        required: true
        schema:
          format: int32
          type: integer
      - description: The ages of the children you want offers for
        explode: false
        in: query
        name: childrenAges
        schema:
          items:
            format: int32
            type: integer
          type: array
        style: form
      - description: "Depending on the postNextDay setting of a service it will be\
          \ posted before or after midnight.\r\nBreakfast is usually delivered on\
          \ the next morning, having 'postNextDay' set to true. Its 'default dates'\
          \ are from the day after\r\narrival until the departure day. For services\
          \ like dinner 'postNextDay' is false, and default dates are day of arrival\
          \ until one\r\nday before departure.\r\nWith this query parameter set to\
          \ 'false', you can also ask for dates outside of those default dates. It\
          \ defaults to true."
        in: query
        name: onlyDefaultDates
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceOffersModel'
          description: Success.
        "204":
          content: {}
          description: There are no available offers for the specified parameters.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - offers.read
        - reservations.manage
        - admin
      summary: Returns service offers for one specific stay.
      tags:
      - Offer
  /booking/v1/offer-index:
    get:
      description: 'Calculates and returns offers per time slice for a specific rate
        plan, arrival and departure date.<br>You must have at least one of these scopes:
        ''offer-index.read, offers.read''.'
      operationId: BookingOffer-indexGet
      parameters:
      - in: query
        name: ratePlanId
        required: true
        schema:
          type: string
      - description: <br />Specify either a pure date or a date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: from
        required: true
        schema:
          type: string
      - description: <br />Specify either a pure date or a date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: to
        required: true
        schema:
          type: string
      - in: query
        name: channelCode
        required: true
        schema:
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        x-ms-enum:
          name: ChannelCode
          modelAsString: false
      - description: Page number, starting from 1 and defaulting to 1. Results in
          204 if there are no items on that page.
        in: query
        name: pageNumber
        schema:
          default: 1
          type: integer
      - description: Page size. If this is not set, the pageNumber will be ignored
          and all values returned.
        in: query
        name: pageSize
        schema:
          default: 100
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSliceListModel'
          description: Success.
        "204":
          content: {}
          description: There are no rates for the specified parameters.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - offer-index.read
        - offers.read
        - admin
      summary: Returns offers with rates and availabilities for the specified range.
      tags:
      - Offer
  /booking/v1/reservations:
    get:
      description: 'Returns a list of all reservations, filtered by the specified
        parameters. If no parameters are set, returns the entire list.<br>You must
        have at least one of these scopes: ''reservations.read, reservations.manage''.'
      operationId: BookingReservationsGet
      parameters:
      - description: Filter result by booking id
        in: query
        name: bookingId
        schema:
          type: string
      - description: Filter result by requested properties
        explode: false
        in: query
        name: propertyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested rate plans
        explode: false
        in: query
        name: ratePlanIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested companies
        explode: false
        in: query
        name: companyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by assigned units
        explode: false
        in: query
        name: unitIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested unit groups
        explode: false
        in: query
        name: unitGroupIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested unit group types
        explode: false
        in: query
        name: unitGroupTypes
        schema:
          items:
            enum:
            - BedRoom
            - MeetingRoom
            - EventSpace
            - ParkingLot
            - Other
            type: string
            x-ms-enum:
              name: UnitGroupType
              modelAsString: false
          type: array
        style: form
      - description: Filter result by requested blocks
        explode: false
        in: query
        name: blockIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by reservation status
        explode: false
        in: query
        name: status
        schema:
          items:
            enum:
            - Confirmed
            - InHouse
            - CheckedOut
            - Canceled
            - NoShow
            type: string
            x-ms-enum:
              name: ReservationStatus
              modelAsString: false
          type: array
        style: form
      - description: "Filter by date and time attributes of reservation. Use in combination\
          \ with the 'To' and 'From' attributes.\r\nAll filters will check if the\
          \ date specified by the filter type is between from (included) and to (excluded).\r\
          \nThe exception being filtering for 'stay', which will return all reservations\
          \ that are overlapping with the interval specified by from and to."
        in: query
        name: dateFilter
        schema:
          enum:
          - Arrival
          - Departure
          - Stay
          - Creation
          - Modification
          - Cancellation
          type: string
          x-ms-enum:
            name: DateFilterType
            modelAsString: false
        x-ms-enum:
          name: DateFilterType
          modelAsString: false
      - description: The start of the time interval. When filtering by date, at least
          one of 'from' and 'to' has to be specified<br />A date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: The end of the time interval, must be larger than 'from'. When
          filtering by date, at least one of 'from' and 'to' has to be specified<br
          />A date and time (without fractional second part) in UTC or with UTC offset
          as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: to
        schema:
          format: date-time
          type: string
      - description: Filter result by the channel code
        explode: false
        in: query
        name: channelCode
        schema:
          items:
            enum:
            - Direct
            - BookingCom
            - Ibe
            - ChannelManager
            - Expedia
            - Homelike
            type: string
            x-ms-enum:
              name: ChannelCode
              modelAsString: false
          type: array
        style: form
      - description: Filter result by source
        explode: false
        in: query
        name: sources
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by validation message category
        explode: false
        in: query
        name: validationMessageCategory
        schema:
          items:
            enum:
            - OfferNotAvailable
            - AutoUnitAssignment
            type: string
            x-ms-enum:
              name: ValidationMessageCategory
              modelAsString: false
          type: array
        style: form
      - description: "Filter result by the external code. The result set will contain\
          \ all reservations that have an external code starting with the\r\nprovided\
          \ value"
        in: query
        name: externalCode
        schema:
          type: string
      - description: "This will filter all reservations where the provided text is\
          \ contained in: booker first name or last name or email or company name,\r\
          \nprimary guest first name or last name or email or company name, external\
          \ code, reservation id, unit name. The search is case insensitive."
        in: query
        name: textSearch
        schema:
          type: string
      - description: This will filter reservations based on their balance.<br />You
          can provide an array of string expressions which all need to apply.<br />Each
          expression has the form of 'OPERATION_VALUE' where VALUE needs to be of
          the valid format of the property type and OPERATION can be:<br />'eq' for
          equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater
          than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br
          />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7'
          would mean the value should be less than or equal to 7
        explode: false
        in: query
        name: balanceFilter
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "If set to {true}, returns only reservations, in which all folios\
          \ are closed and have an invoice.\r\nIf set to {false}, returns only reservations,\
          \ in which some of the folios are open or don't have an invoice"
        in: query
        name: allFoliosHaveInvoice
        schema:
          type: boolean
      - description: Page number, starting from 1 and defaulting to 1. Results in
          204 if there are no items on that page.
        in: query
        name: pageNumber
        schema:
          default: 1
          type: integer
      - description: Page size. If this is not set, the pageNumber will be ignored
          and all values returned.
        in: query
        name: pageSize
        schema:
          default: 100
          type: integer
      - description: 'List of all fields that can be used to sort the results. Possible
          values are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc,
          created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc,
          firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc.
          All other values will be silently ignored.'
        explode: false
        in: query
        name: sort
        schema:
          items:
            enum:
            - arrival:asc
            - arrival:desc
            - departure:asc
            - departure:desc
            - created:asc
            - created:desc
            - updated:asc
            - updated:desc
            - id:asc
            - id:desc
            - firstname:asc
            - firstname:desc
            - lastname:asc
            - lastname:desc
            - unitname:asc
            - unitname:desc
            type: string
          type: array
        style: form
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: booker, actions, timeSlices, services, assignedUnits,
          company. All other values will be silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - booker
            - actions
            - timeSlices
            - services
            - assignedUnits
            - company
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationListModel'
          description: ""
        "204":
          content: {}
          description: No reservations found.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a list of all reservations, filtered by the specified parameters.
      tags:
      - Reservation
  /booking/v1/reservations/$count:
    get:
      description: 'If no parameters are set, returns the total count of reservations.<br>You
        must have at least one of these scopes: ''reservations.read, reservations.manage''.'
      operationId: BookingReservations$countGet
      parameters:
      - description: Filter result by booking id
        in: query
        name: bookingId
        schema:
          type: string
      - description: Filter result by requested properties
        explode: false
        in: query
        name: propertyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested rate plans
        explode: false
        in: query
        name: ratePlanIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested companies
        explode: false
        in: query
        name: companyIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by assigned units
        explode: false
        in: query
        name: unitIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested unit groups
        explode: false
        in: query
        name: unitGroupIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by requested unit group types
        explode: false
        in: query
        name: unitGroupTypes
        schema:
          items:
            enum:
            - BedRoom
            - MeetingRoom
            - EventSpace
            - ParkingLot
            - Other
            type: string
            x-ms-enum:
              name: UnitGroupType
              modelAsString: false
          type: array
        style: form
      - description: Filter result by requested blocks
        explode: false
        in: query
        name: blockIds
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by reservation status
        explode: false
        in: query
        name: status
        schema:
          items:
            enum:
            - Confirmed
            - InHouse
            - CheckedOut
            - Canceled
            - NoShow
            type: string
            x-ms-enum:
              name: ReservationStatus
              modelAsString: false
          type: array
        style: form
      - description: "Filter by date and time attributes of reservation. Use in combination\
          \ with the 'To' and 'From' attributes.\r\nAll filters will check if the\
          \ date specified by the filter type is between from (included) and to (excluded).\r\
          \nThe exception being filtering for 'stay', which will return all reservations\
          \ that are overlapping with the interval specified by from and to."
        in: query
        name: dateFilter
        schema:
          enum:
          - Arrival
          - Departure
          - Stay
          - Creation
          - Modification
          - Cancellation
          type: string
          x-ms-enum:
            name: DateFilterType
            modelAsString: false
        x-ms-enum:
          name: DateFilterType
          modelAsString: false
      - description: The start of the time interval. When filtering by date, at least
          one of 'from' and 'to' has to be specified<br />A date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: The end of the time interval, must be larger than 'from'. When
          filtering by date, at least one of 'from' and 'to' has to be specified<br
          />A date and time (without fractional second part) in UTC or with UTC offset
          as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: to
        schema:
          format: date-time
          type: string
      - description: Filter result by the channel code
        explode: false
        in: query
        name: channelCode
        schema:
          items:
            enum:
            - Direct
            - BookingCom
            - Ibe
            - ChannelManager
            - Expedia
            - Homelike
            type: string
            x-ms-enum:
              name: ChannelCode
              modelAsString: false
          type: array
        style: form
      - description: Filter result by source
        explode: false
        in: query
        name: sources
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter result by validation message category
        explode: false
        in: query
        name: validationMessageCategory
        schema:
          items:
            enum:
            - OfferNotAvailable
            - AutoUnitAssignment
            type: string
            x-ms-enum:
              name: ValidationMessageCategory
              modelAsString: false
          type: array
        style: form
      - description: "Filter result by the external code. The result set will contain\
          \ all reservations that have an external code starting with the\r\nprovided\
          \ value"
        in: query
        name: externalCode
        schema:
          type: string
      - description: "This will filter all reservations where the provided text is\
          \ contained in: booker first name or last name or email or company name,\r\
          \nprimary guest first name or last name or email or company name, external\
          \ code, reservation id, unit name. The search is case insensitive."
        in: query
        name: textSearch
        schema:
          type: string
      - description: This will filter reservations based on their balance.<br />You
          can provide an array of string expressions which all need to apply.<br />Each
          expression has the form of 'OPERATION_VALUE' where VALUE needs to be of
          the valid format of the property type and OPERATION can be:<br />'eq' for
          equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater
          than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br
          />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7'
          would mean the value should be less than or equal to 7
        explode: false
        in: query
        name: balanceFilter
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "If set to {true}, returns only reservations, in which all folios\
          \ are closed and have an invoice.\r\nIf set to {false}, returns only reservations,\
          \ in which some of the folios are open or don't have an invoice"
        in: query
        name: allFoliosHaveInvoice
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns the number of reservations fulfilling the criteria specified
        in the parameters.
      tags:
      - Reservation
  /booking/v1/reservations/{id}:
    get:
      description: 'Retrieves a reservation, specified by its ID.<br>You must have
        at least one of these scopes: ''reservations.read, reservations.manage''.'
      operationId: BookingReservationsByIdGet
      parameters:
      - description: Id of the reservation to be retrieved.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'List of all embedded resources that should be expanded in the
          response. Possible values are: timeSlices, services, booker, actions, company,
          assignedUnits. All other values will be silently ignored.'
        explode: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - timeSlices
            - services
            - booker
            - actions
            - company
            - assignedUnits
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationModel'
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns a specific reservation.
      tags:
      - Reservation
    patch:
      description: "Here is the list of operations that are currently allowed:\r\n\
        - Add, replace and remove Comment\r\n- Add, replace and remove GuestComment\r\
        \n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove TravelPurpose\r\
        \n- Add, replace and remove AdditionalGuests\r\n- Add a company (using company/Id,\
        \ and only if not already set)\r\n- Add, replace and remove Commission\r\n\
        - Replace PrimaryGuest\r\n- Remove ValidationMessages<br>You must have this\
        \ scope: 'reservations.manage'."
      operationId: BookingReservationsByIdPatch
      parameters:
      - description: Id of the reservation to be modified.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: 'Define the list of operations to be applied to the resource.
                Learn more about JSON Patch here: http://jsonpatch.com/.'
              items:
                $ref: '#/components/schemas/Operation'
              type: array
        description: 'Define the list of operations to be applied to the resource.
          Learn more about JSON Patch here: http://jsonpatch.com/.'
        required: true
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Allows to modify certain reservation properties
      tags:
      - Reservation
      x-codegen-request-body-name: body
  /booking/v1/reservations/{id}/offers:
    get:
      description: 'Calculates and returns offers for amending a specific reservation.<br>You
        must have at least one of these scopes: ''offers.read, reservations.manage''.'
      operationId: BookingReservationsByIdOffersGet
      parameters:
      - description: Id of the reservation to be amended.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Date and optional time of arrival<br />Specify either a pure
          date or a date and time (without fractional second part) in UTC or with
          UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: arrival
        schema:
          type: string
      - description: Date and optional time of departure. Cannot be more than 5 years
          after arrival.<br />Specify either a pure date or a date and time (without
          fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: departure
        schema:
          type: string
      - description: Number of adults
        in: query
        name: adults
        schema:
          format: int32
          type: integer
      - description: Ages of children
        explode: false
        in: query
        name: childrenAges
        schema:
          items:
            format: int32
            type: integer
          type: array
        style: form
      - description: The channel code used to filter the rate plans
        in: query
        name: channelCode
        schema:
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        x-ms-enum:
          name: ChannelCode
          modelAsString: false
      - description: The promo code associated with a certain special offer, like
          corporate rate
        in: query
        name: promoCode
        schema:
          type: string
      - description: "Whether the offers should be re-quoted based on current prices,\
          \ or only additions like change of number of adults should be calculated.\r\
          \nDefaults to 'false'"
        in: query
        name: requote
        schema:
          type: boolean
      - description: Return also offers that are currently not publicly bookable as
          restrictions are violated. By default only available offers are returned
        in: query
        name: includeUnavailable
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationStayOffersModel'
          description: Success
        "204":
          content: {}
          description: There are no available offers for the specified parameters.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - offers.read
        - reservations.manage
        - admin
      summary: Returns offers for one specific reservation.
      tags:
      - Reservation
  /booking/v1/reservations/{id}/service-offers:
    get:
      description: 'Calculates and returns service offers for a specific reservation.<br>You
        must have at least one of these scopes: ''offers.read, reservations.manage''.'
      operationId: BookingReservationsByIdService-offersGet
      parameters:
      - description: Id of the reservation.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The channel code used to filter the services
        in: query
        name: channelCode
        schema:
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        x-ms-enum:
          name: ChannelCode
          modelAsString: false
      - description: "Depending on the postNextDay setting of a service it will by\
          \ default be posted before or after midnight.\r\nBreakfast is usually delivered\
          \ on the next morning, so all the dates from the day after arrival to the\
          \ departure day\r\nare default dates and will have this flag set to true.\
          \ For services like a dinner it is the other way around.\r\nWith this query\
          \ parameter, you can also ask for the dates, that usually the service will\
          \ not be booked. It defaults to true."
        in: query
        name: onlyDefaultDates
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceOffersModel'
          description: Success
        "204":
          content: {}
          description: There are no available offers for the specified parameters.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - offers.read
        - reservations.manage
        - admin
      summary: Returns service offers for one specific reservation.
      tags:
      - Reservation
  /booking/v1/reservations/{id}/services:
    delete:
      description: 'Removes a service from a reservation. The service will not be
        removed if it is mandatory, already posted or if the service date is in the
        past.<br>You must have this scope: ''reservations.manage''.'
      operationId: BookingReservationsByIdServicesDelete
      parameters:
      - description: Id of the reservation.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The id of the service to delete
        in: query
        name: serviceId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Removes a service from a reservation.
      tags:
      - Reservation
    get:
      description: 'Returns the services booked for a specific reservation.<br>You
        must have at least one of these scopes: ''reservations.read, reservations.manage''.'
      operationId: BookingReservationsByIdServicesGet
      parameters:
      - description: Id of the reservation.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationServiceListModel'
          description: Success
        "204":
          content: {}
          description: There are no booked services for the specified reservation.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.read
        - reservations.manage
        - admin
      summary: Returns the services booked for a specific reservation.
      tags:
      - Reservation
  /booking/v1/reservation-actions/{id}/assign-unit:
    put:
      description: 'Assigns one of the available units to a reservation which is in
        state ''Confirmed'' or ''InHouse''.<br>You must have at least one of these
        scopes: ''reservations.assign-unit, reservations.manage''.'
      operationId: BookingReservation-actionsByIdAssign-unitPut
      parameters:
      - description: Id of the reservation a unit should be assigned to.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoAssignedUnitListModel'
          description: Unit assignment was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.assign-unit
        - reservations.manage
        - admin
      summary: Assign a unit to a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/assign-unit/{unitId}:
    put:
      description: 'Assigns a specific unit to a reservation which is in state ''Confirmed''
        or ''InHouse''.<br />If the unit is not available, the call will return an
        error, and no unit will be assigned.<br>You must have at least one of these
        scopes: ''reservations.assign-unit, reservations.manage''.'
      operationId: BookingReservation-actionsByIdAssign-unitByUnitIdPut
      parameters:
      - description: Id of the reservation the unit should be assigned to.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The id of the unit to be assigned.
        in: path
        name: unitId
        required: true
        schema:
          type: string
      - description: The start date and optional time for the unit assignment. If
          not specified, the reservation's arrival will be used.<br />Specify either
          a pure date or a date and time (without fractional second part) in UTC or
          with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: from
        schema:
          type: string
      - description: The end date and optional time for the unit assignment. If not
          specified, the reservation's departure will be used.<br />Specify either
          a pure date or a date and time (without fractional second part) in UTC or
          with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
        in: query
        name: to
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedUnitModel'
          description: Unit assignment was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.assign-unit
        - reservations.manage
        - admin
      summary: Assign a specific unit to a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/unassign-units:
    put:
      description: "Unassigns units for all time slices of the given reservation.\
        \ If no units are assigned for the\r\nreservation nothing will happen. It\
        \ will fail for reservations in status 'CheckedOut'.<br>You must have at least\
        \ one of these scopes: 'reservations.assign-unit, reservations.manage'."
      operationId: BookingReservation-actionsByIdUnassign-unitsPut
      parameters:
      - description: Id of the reservation the unit should be unassigned for.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Unassigning the unit was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.assign-unit
        - reservations.manage
        - admin
      summary: Unassign units from a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/checkin:
    put:
      description: 'Check in a specific reservation which is in status ''Confirmed'',
        and has a unit assigned. This changes the status to ''InHouse'', and sets
        the check-in date and time.<br>You must have this scope: ''reservations.manage''.'
      operationId: BookingReservation-actionsByIdCheckinPut
      parameters:
      - description: Id of the reservation that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Define if city tax should be added for this reservation or not.
          The default is "true".
        in: query
        name: withCityTax
        schema:
          type: boolean
      responses:
        "204":
          content: {}
          description: Check-in of the reservation was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Check-in of a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/checkout:
    put:
      description: "Check out a specific reservation which is in status 'InHouse'.\
        \ This changes the status to 'CheckedOut', and sets the check-out date and\
        \ time.\r\nAll open charges on the folio will be posted.\r\n<br />\r\nCheck-out\
        \ is only possible, if the departure date is not later than tomorrow. Otherwise,\
        \ first amend the reservation and shorten the stay.<br>You must have this\
        \ scope: 'reservations.manage'."
      operationId: BookingReservation-actionsByIdCheckoutPut
      parameters:
      - description: Id of the reservation that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Check-out of the reservation was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Check-out of a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/cancel:
    put:
      description: "Cancel a specific reservation which is in status 'Confirmed' and\
        \ where the arrival time is in the future.\r\nThis changes the status to 'Canceled',\
        \ and sets the cancellation date and time.<br>You must have this scope: 'reservations.manage'."
      operationId: BookingReservation-actionsByIdCancelPut
      parameters:
      - description: Id of the reservation that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Cancellation of the reservation was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Cancel a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/noshow:
    put:
      description: "Set a specific reservation to No-show which is in status 'Confirmed'\
        \ and where the arrival date is in the past.\r\nThis changes the status to\
        \ 'NoShow', and sets the no-show date and time.<br>You must have this scope:\
        \ 'reservations.manage'."
      operationId: BookingReservation-actionsByIdNoshowPut
      parameters:
      - description: Id of the reservation that should be processed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Setting the reservation to No-show was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Set a reservation to No-show.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/amend:
    put:
      description: "Modifies the stay-related data of a reservation.<br />\r\nIf a\
        \ reservation is 'Confirmed', you can change all fields.<br />\r\nIf a reservation\
        \ is 'InHouse', only changes to future time slices are possible.<br />\r\n\
        Changes to reservations that are in the status 'CheckedOut' or 'Canceled'\
        \ are not possible at all.<br>You must have this scope: 'reservations.manage'."
      operationId: BookingReservation-actionsByIdAmendPut
      parameters:
      - description: Id of the reservation that should be modified
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DesiredStayDetailsModel'
        description: The new stay details that should be applied to the reservation.
        required: true
      responses:
        "204":
          content: {}
          description: The reservation has been changed.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Allows you to amend the stay details of a reservation
      tags:
      - ReservationActions
      x-codegen-request-body-name: body
  /booking/v1/reservation-actions/{id}/amend/$force:
    put:
      description: "Modifies the stay-related data of a reservation.<br />\r\nIf a\
        \ reservation is 'Confirmed', you can change all fields.<br />\r\nIf a reservation\
        \ is 'InHouse', only changes to future time slices are possible.<br />\r\n\
        Changes to reservations that are in the status 'CheckedOut' or 'Canceled'\
        \ are not possible at all.<br>You must have this scope: 'reservations.force-manage'."
      operationId: BookingReservation-actionsByIdAmend$forcePut
      parameters:
      - description: Id of the reservation that should be modified
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DesiredStayDetailsModel'
        description: The new stay details that should be applied to the reservation.
        required: true
      responses:
        "204":
          content: {}
          description: The reservation has been changed.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.force-manage
        - admin
      summary: Allows you to amend the stay details of a reservation regardless of
        availability or restrictions.
      tags:
      - ReservationActions
      x-codegen-request-body-name: body
  /booking/v1/reservation-actions/{id}/book-service:
    put:
      description: "Use this to book a service for a specific reservation.\r\nPlease\
        \ note that when dates are specified, all desired dates must be specified\
        \ or they will be removed if not posted to the folio.<br>You must have this\
        \ scope: 'reservations.manage'."
      operationId: BookingReservation-actionsByIdBook-servicePut
      parameters:
      - description: Id of the reservation.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookReservationServiceModel'
        required: true
      responses:
        "204":
          content: {}
          description: Booking of the service for the reservation was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "415":
          content: {}
          description: Unsupported media type.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Book the service for a specific reservation.
      tags:
      - ReservationActions
      x-codegen-request-body-name: body
  /booking/v1/reservation-actions/{id}/remove-city-tax:
    put:
      description: 'Use this is you want to remove the city tax from a reservation
        before the stay.<br>You must have this scope: ''reservations.manage''.'
      operationId: BookingReservation-actionsByIdRemove-city-taxPut
      parameters:
      - description: Id of the reservation.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Removal of the city tax for the reservation was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Removes the city tax from a reservation.
      tags:
      - ReservationActions
  /booking/v1/reservation-actions/{id}/add-city-tax:
    put:
      description: 'Use this if you want to add the city tax to a reservation.<br>You
        must have this scope: ''reservations.manage''.'
      operationId: BookingReservation-actionsByIdAdd-city-taxPut
      parameters:
      - description: Id of the reservation.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Addition of the city tax for the reservation was successful.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      security:
      - oauth2:
        - reservations.manage
        - admin
      summary: Adds the city tax to a reservation.
      tags:
      - ReservationActions
  /booking/v1/types/sources:
    get:
      description: Returns a list of channels that could be used as a source to create
        bookings.
      operationId: BookingTypesSourcesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceListModel'
          description: Success.
        "400":
          content: {}
          description: Bad request.
        "401":
          content: {}
          description: You are unauthorized.
        "403":
          content: {}
          description: Forbidden.
        "404":
          content: {}
          description: The Request-URI could not be found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageItemCollection'
          description: Validation errors in the request body or query params.
        "500":
          content: {}
          description: An unexpected error occurred.
        "503":
          content: {}
          description: The server is currently unavailable. Please try later.
      summary: Returns a list of supported sources.
      tags:
      - Types
components:
  schemas:
    MonetaryValueModel:
      properties:
        amount:
          format: double
          type: number
        currency:
          type: string
      required:
      - amount
      - currency
      type: object
    CreateBlockTimeSliceModel:
      properties:
        blockedUnits:
          description: Number of units blocked for the time slice
          format: int32
          type: integer
      required:
      - blockedUnits
      type: object
    CreateBlockModel:
      example: |-
        {
          "groupId": "XPGMSXGF",
          "ratePlanId": "MUC-NONREF-SGL",
          "from": "2021-05-26",
          "to": "2021-05-29",
          "grossDailyRate": {
            "amount": 160.0,
            "currency": "EUR"
          },
          "timeSlices": [
            {
              "blockedUnits": 3
            },
            {
              "blockedUnits": 0
            },
            {
              "blockedUnits": 7
            }
          ]
        }
      properties:
        groupId:
          description: ID of the group that reserved the block
          type: string
        ratePlanId:
          description: The rate plan
          type: string
        from:
          description: Start date and time from which the inventory will be blocked<br
            />Specify either a pure date or a date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        to:
          description: End date and time until which the inventory will be blocked.
            Cannot be more than 5 years after the start date.<br />Specify either
            a pure date or a date and time (without fractional second part) in UTC
            or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        grossDailyRate:
          $ref: '#/components/schemas/MonetaryValueModel'
        timeSlices:
          description: The list of blocked units for each time slice
          items:
            $ref: '#/components/schemas/CreateBlockTimeSliceModel'
          type: array
        blockedUnits:
          description: Number of units to block for the defined time period
          format: int32
          type: integer
        promoCode:
          description: The promo code associated with a certain special offer
          type: string
        corporateCode:
          description: The corporate code associated with a certain special offer
          type: string
      required:
      - from
      - grossDailyRate
      - groupId
      - ratePlanId
      - to
      type: object
    BlockCreatedModel:
      example: |-
        {
          "id": "MUC-HSGTDG"
        }
      properties:
        id:
          description: Block id
          type: string
      required:
      - id
      type: object
    MessageItemCollection:
      properties:
        messages:
          items:
            type: string
          readOnly: true
          type: array
      type: object
    EmbeddedGroupModel:
      properties:
        id:
          description: Group booking id
          type: string
        name:
          description: Name of the group
          type: string
      required:
      - id
      type: object
    EmbeddedPropertyModel:
      properties:
        id:
          description: The property id
          type: string
        code:
          description: The code for the property that can be shown in reports and
            table views
          type: string
        name:
          description: The name for the property
          type: string
        description:
          description: The description for the property
          readOnly: true
          type: string
      required:
      - id
      type: object
    EmbeddedRatePlanModel:
      properties:
        id:
          description: The rate plan id
          type: string
        code:
          description: The code for the rate plan that can be shown in reports and
            table views
          type: string
        name:
          description: The name for the rate plan
          type: string
        description:
          description: The description for the rate plan
          type: string
        isSubjectToCityTax:
          description: Whether the rate plan is subject to city tax or not
          type: boolean
      required:
      - id
      - isSubjectToCityTax
      type: object
    EmbeddedUnitGroupModel:
      properties:
        id:
          description: The unit group id
          type: string
        code:
          description: The code for the unit group that can be shown in reports and
            table views
          type: string
        name:
          description: The name for the unit group
          type: string
        description:
          description: The description for the unit group
          type: string
      required:
      - id
      type: object
    AmountModel:
      example: |-
        {
          "grossAmount": 107.0,
          "netAmount": 100.0,
          "vatType": "Reduced",
          "vatPercent": 7.0,
          "currency": "USD"
        }
      properties:
        grossAmount:
          format: double
          type: number
        netAmount:
          format: double
          type: number
        vatType:
          enum:
          - "Null"
          - VeryReduced
          - Reduced
          - Normal
          - Without
          - Special
          - ReducedCovid19
          - NormalCovid19
          type: string
          x-ms-enum:
            name: VatType
            modelAsString: false
        vatPercent:
          format: double
          type: number
        currency:
          type: string
      required:
      - currency
      - grossAmount
      - netAmount
      - vatPercent
      - vatType
      type: object
    BlockTimeSliceModel:
      properties:
        from:
          description: Start date and time from which units will be blocked<br />A
            date and time (without fractional second part) in UTC or with UTC offset
            as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: End date and time until which units will be blocked<br />A
            date and time (without fractional second part) in UTC or with UTC offset
            as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        blockedUnits:
          description: Number of units blocked for this time slice
          format: int32
          type: integer
        pickedUnits:
          description: Number of units which have picked reservations for this time
            slice
          format: int32
          type: integer
        baseAmount:
          $ref: '#/components/schemas/AmountModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - baseAmount
      - blockedUnits
      - from
      - pickedUnits
      - to
      - totalGrossAmount
      type: object
    ActionReasonModel[NotAllowedBlockActionReason]:
      properties:
        code:
          enum:
          - DeleteNotAllowedForBlockWithReservations
          - ReleaseNotAllowedForBlockWithReservations
          - ReleaseNotAllowedForBlockInThePast
          - ReleaseNotAllowedForBlockNotInStatusDefinite
          - ConfirmNotAllowedForBlockNotInStatusTentative
          - ConfirmNotAllowedForBlockInThePast
          - CancelNotAllowedForBlockWithNotCancelledReservations
          - CancelNotAllowedForBlockNotInStatusDefiniteOrTentative
          - PickupNotAllowedForBlockNotInStatusDefinite
          - PickupNotAllowedForBlockInThePast
          - PickupNotAllowedForFullyPickedBlock
          - ModifyNotAllowedForBlockInThePast
          - ModifyNotAllowedForBlockInStatusCanceled
          - WashNotAllowedForBlockNotInStatusDefinite
          - WashNotAllowedForBlockWithoutReservations
          type: string
          x-ms-enum:
            name: NotAllowedBlockActionReason
            modelAsString: false
        message:
          type: string
      required:
      - code
      - message
      type: object
    ActionModel[BlockAction,NotAllowedBlockActionReason]:
      properties:
        action:
          enum:
          - Delete
          - Confirm
          - Release
          - Cancel
          - Pickup
          - Modify
          - Wash
          type: string
          x-ms-enum:
            name: BlockAction
            modelAsString: false
        isAllowed:
          type: boolean
        reasons:
          items:
            $ref: '#/components/schemas/ActionReasonModel[NotAllowedBlockActionReason]'
          type: array
      required:
      - action
      - isAllowed
      type: object
    BlockItemModel:
      properties:
        id:
          description: Block id
          type: string
        group:
          $ref: '#/components/schemas/EmbeddedGroupModel'
        status:
          description: Status of the block
          enum:
          - Tentative
          - Definite
          - Canceled
          type: string
          x-ms-enum:
            name: BlockStatus
            modelAsString: false
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        grossDailyRate:
          $ref: '#/components/schemas/MonetaryValueModel'
        from:
          description: Start date and time from which the inventory will be blocked<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: End date and time until which the inventory will be blocked<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        pickedReservations:
          description: Number of reservations already picked from this block
          format: int32
          type: integer
        promoCode:
          description: The promo code associated with a certain special offer used
            to create the block
          type: string
        corporateCode:
          description: The corporate code associated with a certain special offer
            used to create the block
          type: string
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        timeSlices:
          description: The list of blocked units for each time slice
          items:
            $ref: '#/components/schemas/BlockTimeSliceModel'
          type: array
        actions:
          description: The list of actions for this block
          items:
            $ref: '#/components/schemas/ActionModel[BlockAction,NotAllowedBlockActionReason]'
          type: array
      required:
      - created
      - from
      - grossDailyRate
      - group
      - id
      - modified
      - pickedReservations
      - property
      - ratePlan
      - status
      - to
      - unitGroup
      type: object
    BlockListModel:
      example: |-
        {
          "blocks": [
            {
              "id": "MUC-HSGTDG",
              "group": {
                "id": "XPGMSXGF",
                "name": "apaleo Summer Festival 2022"
              },
              "status": "Tentative",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_SGL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard"
              },
              "grossDailyRate": {
                "amount": 160.0,
                "currency": "EUR"
              },
              "from": "2021-05-26T17:00:00+02:00",
              "to": "2021-05-27T11:00:00+02:00",
              "pickedReservations": 0,
              "created": "0001-01-01T00:00:00Z",
              "modified": "0001-01-01T00:00:00Z",
              "timeSlices": [
                {
                  "from": "2021-05-26T17:00:00+02:00",
                  "to": "2021-05-27T11:00:00+02:00",
                  "blockedUnits": 2,
                  "pickedUnits": 0
                }
              ]
            },
            {
              "id": "MUC-JAIULS",
              "group": {
                "id": "XPGMSXGF",
                "name": "apaleo Summer Festival 2022"
              },
              "status": "Definite",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-DBL",
                "code": "DBL",
                "name": "Double",
                "description": "Double"
              },
              "grossDailyRate": {
                "amount": 190.0,
                "currency": "EUR"
              },
              "from": "2021-05-26T17:00:00+02:00",
              "to": "2021-05-28T11:00:00+02:00",
              "pickedReservations": 1,
              "created": "0001-01-01T00:00:00Z",
              "modified": "0001-01-01T00:00:00Z",
              "timeSlices": [
                {
                  "from": "2021-05-26T17:00:00+02:00",
                  "to": "2021-05-27T11:00:00+02:00",
                  "blockedUnits": 2,
                  "pickedUnits": 1
                },
                {
                  "from": "2021-05-27T17:00:00+02:00",
                  "to": "2021-05-28T11:00:00+02:00",
                  "blockedUnits": 3,
                  "pickedUnits": 1
                }
              ]
            }
          ],
          "count": 2
        }
      properties:
        blocks:
          description: List of blocks
          items:
            $ref: '#/components/schemas/BlockItemModel'
          type: array
        count:
          description: Total count of items
          format: int64
          type: integer
      required:
      - blocks
      - count
      type: object
    CountModel:
      example: |-
        {
          "count": 50
        }
      properties:
        count:
          format: int64
          type: integer
      required:
      - count
      type: object
    BlockModel:
      example: |-
        {
          "id": "MUC-HSGTDG",
          "group": {
            "id": "XPGMSXGF",
            "name": "apaleo Summer Festival 2022"
          },
          "status": "Tentative",
          "property": {
            "id": "MUC",
            "code": "MUC",
            "name": "Demo Hotel Munich",
            "description": "This is the demo hotel Munich"
          },
          "ratePlan": {
            "id": "MUC-NONREF_SGL",
            "code": "NONREF",
            "name": "Non Refundable",
            "description": "Non Refundable",
            "isSubjectToCityTax": false
          },
          "unitGroup": {
            "id": "MUC-SGL",
            "code": "SGL",
            "name": "Standard",
            "description": "Standard"
          },
          "grossDailyRate": {
            "amount": 160.0,
            "currency": "EUR"
          },
          "from": "2021-05-26T17:00:00+02:00",
          "to": "2021-05-28T11:00:00+02:00",
          "pickedReservations": 0,
          "created": "0001-01-01T00:00:00Z",
          "modified": "0001-01-01T00:00:00Z",
          "timeSlices": [
            {
              "from": "2021-05-26T17:00:00+02:00",
              "to": "2021-05-27T11:00:00+02:00",
              "blockedUnits": 2,
              "pickedUnits": 0
            },
            {
              "from": "2021-05-27T17:00:00+02:00",
              "to": "2021-05-28T11:00:00+02:00",
              "blockedUnits": 3,
              "pickedUnits": 0
            }
          ]
        }
      properties:
        id:
          description: Block id
          type: string
        group:
          $ref: '#/components/schemas/EmbeddedGroupModel'
        status:
          description: "Status of the block. Tentative will just mark inventory as\
            \ requested, but still allows to sell it\r\nthrough other channels. Definite\
            \ will block the inventory for selling through other channels"
          enum:
          - Tentative
          - Definite
          - Canceled
          type: string
          x-ms-enum:
            name: BlockStatus
            modelAsString: false
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        grossDailyRate:
          $ref: '#/components/schemas/MonetaryValueModel'
        from:
          description: Start date and time from which the inventory will be blocked<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: End date and time until which the inventory will be blocked<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        pickedReservations:
          description: Number of reservations already picked from this block
          format: int32
          type: integer
        promoCode:
          description: The promo code associated with a certain special offer used
            to create the block
          type: string
        corporateCode:
          description: The corporate code associated with a certain special offer
            used to create the block
          type: string
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        timeSlices:
          description: The list of time slices for this block
          items:
            $ref: '#/components/schemas/BlockTimeSliceModel'
          type: array
        actions:
          description: The list of actions for this block
          items:
            $ref: '#/components/schemas/ActionModel[BlockAction,NotAllowedBlockActionReason]'
          type: array
      required:
      - created
      - from
      - grossDailyRate
      - group
      - id
      - modified
      - pickedReservations
      - property
      - ratePlan
      - status
      - to
      - unitGroup
      type: object
    Operation:
      example:
        path: path
        op: op
        from: from
        value: '{}'
      properties:
        value:
          type: object
        path:
          type: string
        op:
          type: string
        from:
          type: string
      type: object
    ReplaceBlockModel:
      example: |-
        {
          "from": "2021-05-26",
          "to": "2021-05-29",
          "grossDailyRate": {
            "amount": 160.0,
            "currency": "EUR"
          },
          "timeSlices": [
            {
              "blockedUnits": 3
            },
            {
              "blockedUnits": 0
            },
            {
              "blockedUnits": 7
            }
          ]
        }
      properties:
        from:
          description: Start date and time from which the inventory will be blocked<br
            />Specify either a pure date or a date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        to:
          description: End date and time until which the inventory will be blocked.
            Cannot be more than 5 years after the start date.<br />Specify either
            a pure date or a date and time (without fractional second part) in UTC
            or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        grossDailyRate:
          $ref: '#/components/schemas/MonetaryValueModel'
        timeSlices:
          description: The list of time slices
          items:
            $ref: '#/components/schemas/CreateBlockTimeSliceModel'
          type: array
      required:
      - from
      - grossDailyRate
      - timeSlices
      - to
      type: object
    CreatePaymentAccountModel:
      properties:
        accountNumber:
          description: The account number (e.g. masked credit card number or last
            4 digits)
          type: string
        accountHolder:
          description: The account holder (e.g. card holder)
          type: string
        expiryMonth:
          description: The credit card's expiration month
          type: string
        expiryYear:
          description: The credit card's expiration year
          type: string
        paymentMethod:
          description: The payment method (e.g. visa)
          type: string
        payerEmail:
          description: The email address of the shopper / customer
          type: string
        payerReference:
          description: The reference used to uniquely identify the shopper (e.g. user
            ID or account ID). Used for recurring payments
          type: string
        transactionReference:
          description: 'The reference of a payment transaction. This should be set
            when a payment transaction has been initiated and should be used to complete
            the transaction upon reservation creation. - <b>DEPRECATED: This property
            will be removed 17.07.2021. Use `TransactionReference` on the booking/reservation
            model instead</b>'
          type: string
        isVirtual:
          description: Indicates if the payment account is a virtual credit card.
            If not specified it defaults to 'false'
          type: boolean
        inactiveReason:
          description: A reason why account is inactive when PayerReference was not
            provided
          type: string
      type: object
    PersonAddressModel:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        postalCode:
          type: string
        city:
          type: string
        regionCode:
          type: string
        countryCode:
          type: string
      type: object
    PersonCompanyModel:
      properties:
        name:
          description: Name of the company
          type: string
        taxId:
          description: Tax or Vat ID of the company
          type: string
      type: object
    BookerModel:
      properties:
        title:
          description: Title of the booker
          enum:
          - Mr
          - Ms
          - Dr
          - Prof
          - Mrs
          - Other
          type: string
          x-ms-enum:
            name: PersonTitle
            modelAsString: false
        gender:
          description: Gender of the booker
          enum:
          - Female
          - Male
          - Other
          type: string
          x-ms-enum:
            name: Gender
            modelAsString: false
        firstName:
          description: First name of the booker
          type: string
        middleInitial:
          description: Middle initial of the booker
          type: string
        lastName:
          description: Last name of the booker
          type: string
        email:
          description: Email address of the booker
          type: string
        phone:
          description: Phone number of the booker
          type: string
        address:
          $ref: '#/components/schemas/PersonAddressModel'
        nationalityCountryCode:
          description: The booker's nationality, in ISO 3166-1 alpha-2 code
          type: string
        identificationNumber:
          description: The booker's identification number for the given identificationType.
          type: string
        identificationIssueDate:
          description: The issue date of the booker's identification document.
          example: 2020-10-10
          format: date
          type: string
        identificationType:
          description: The type of the identificationNumber
          enum:
          - SocialInsuranceNumber
          - PassportNumber
          - IdNumber
          - DriverLicenseNumber
          type: string
          x-ms-enum:
            name: IdentificationType
            modelAsString: false
        company:
          $ref: '#/components/schemas/PersonCompanyModel'
        preferredLanguage:
          description: Preferred contact two-letter language code (ISO Alpha-2)
          type: string
        birthDate:
          description: Birth date
          example: 2020-10-10
          format: date
          type: string
        birthPlace:
          description: The place of birth
          type: string
      required:
      - lastName
      type: object
    GuestModel:
      properties:
        title:
          description: Title of the guest
          enum:
          - Mr
          - Ms
          - Dr
          - Prof
          - Mrs
          - Other
          type: string
          x-ms-enum:
            name: PersonTitle
            modelAsString: false
        gender:
          description: Gender of the booker
          enum:
          - Female
          - Male
          - Other
          type: string
          x-ms-enum:
            name: Gender
            modelAsString: false
        firstName:
          description: First name of the guest
          type: string
        middleInitial:
          description: Middle initial of the guest
          type: string
        lastName:
          description: Last name of the guest
          type: string
        email:
          description: Email address of the guest
          type: string
        phone:
          description: Phone number of the guest
          type: string
        address:
          $ref: '#/components/schemas/PersonAddressModel'
        nationalityCountryCode:
          description: The guest's nationality, in ISO 3166-1 alpha-2 code
          type: string
        identificationNumber:
          description: The guest's identification number for the given identificationType.
          type: string
        identificationIssueDate:
          description: The issue date of the guest's identification document.
          example: 2020-10-10
          format: date
          type: string
        identificationType:
          description: The type of the identificationNumber
          enum:
          - SocialInsuranceNumber
          - PassportNumber
          - IdNumber
          - DriverLicenseNumber
          type: string
          x-ms-enum:
            name: IdentificationType
            modelAsString: false
        company:
          $ref: '#/components/schemas/PersonCompanyModel'
        preferredLanguage:
          description: Two-letter code (ISO Alpha-2) of a language preferred for contact
          type: string
        birthDate:
          description: Guest's birthdate
          example: 2020-10-10
          format: date
          type: string
        birthPlace:
          description: Guest's place of birth
          type: string
      required:
      - lastName
      type: object
    CreateReservationTimeSliceModel:
      properties:
        ratePlanId:
          description: The rate plan id for this time slice
          type: string
        totalAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - ratePlanId
      type: object
    Date:
      properties:
        serviceDate:
          description: The date the service is delivered
          example: 2020-10-10
          format: date
          type: string
        count:
          description: The number of services to book for this date. It defaults to
            the service offer count when not specified.
          format: int32
          type: integer
        amount:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - serviceDate
      type: object
    BookReservationServiceModel:
      example: |-
        {
          "serviceId": "MUC-SPA",
          "dates": [
            {
              "serviceDate": "2021-05-21",
              "amount": {
                "amount": 25.0,
                "currency": "EUR"
              }
            },
            {
              "serviceDate": "2021-05-22"
            }
          ]
        }
      properties:
        serviceId:
          description: The id of the service you want to book
          type: string
        count:
          description: The number of services to book for each service date. It defaults
            to the service offer count when not specified.
          format: int32
          type: integer
        amount:
          $ref: '#/components/schemas/MonetaryValueModel'
        dates:
          description: The optional dates you want to book the service for; if not
            specified the default service pattern will be used (e.g. whole stay).
          items:
            $ref: '#/components/schemas/Date'
          type: array
      required:
      - serviceId
      type: object
    CommissionModel:
      properties:
        commissionAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        beforeCommissionAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - commissionAmount
      type: object
    CreateReservationModel:
      description: With this request you can create a reservation
      properties:
        arrival:
          description: Date and optional time of arrival<br />Specify either a pure
            date or a date and time (without fractional second part) in UTC or with
            UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        departure:
          description: Date and optional time of departure. Cannot be more than 5
            years after arrival.<br />Specify either a pure date or a date and time
            (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        adults:
          description: Number of adults
          format: int32
          type: integer
        childrenAges:
          description: Ages of the children
          items:
            format: int32
            type: integer
          type: array
        comment:
          description: Additional information and comments
          type: string
        guestComment:
          description: Additional information and comments by the guest
          type: string
        externalCode:
          description: Code in some system
          type: string
        channelCode:
          description: Channel code
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        source:
          description: Source of the reservation
          type: string
        primaryGuest:
          $ref: '#/components/schemas/GuestModel'
        additionalGuests:
          description: Additional guests of the reservation.
          items:
            $ref: '#/components/schemas/GuestModel'
          type: array
        guaranteeType:
          description: "The guarantee that has to be applied for this reservation.\
            \ It has to be the same or stronger than\r\nthe minimum guarantee required\
            \ by the selected rate plan"
          enum:
          - PM6Hold
          - CreditCard
          - Prepayment
          - Company
          type: string
          x-ms-enum:
            name: MinGuaranteeType
            modelAsString: false
        travelPurpose:
          description: Purpose of the trip, leisure or business
          enum:
          - Business
          - Leisure
          type: string
          x-ms-enum:
            name: TravelPurpose
            modelAsString: false
        timeSlices:
          description: "Gross prices including services and taxes for each time slice.\
            \ They will be applied to the reservation timeslices\r\nin the order specified\
            \ from arrival to departure"
          items:
            $ref: '#/components/schemas/CreateReservationTimeSliceModel'
          type: array
        services:
          description: Additional services (extras, add-ons) that should be added
            to the reservation
          items:
            $ref: '#/components/schemas/BookReservationServiceModel'
          type: array
        companyId:
          description: Set this if this reservation belongs to a company
          type: string
        corporateCode:
          description: Corporate code provided during creation. Used to find offers
            during amend.
          type: string
        prePaymentAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        commission:
          $ref: '#/components/schemas/CommissionModel'
        promoCode:
          description: The promo code associated with a certain special offer
          type: string
      required:
      - adults
      - arrival
      - channelCode
      - departure
      - timeSlices
      type: object
    CreateBookingModel:
      description: With this request you can create a booking
      example: |-
        {
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
            "isVirtual": false
          },
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 1",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "reservations": [
            {
              "arrival": "2021-05-23",
              "departure": "2021-05-25",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "guestComment": "I need a wake up service",
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "Prepayment",
              "travelPurpose": "Business",
              "timeSlices": [
                {
                  "ratePlanId": "MUC-NONREF-FAMILY"
                },
                {
                  "ratePlanId": "MUC-NONREF-FAMILY"
                }
              ],
              "services": [
                {
                  "serviceId": "MUC-BRKF"
                },
                {
                  "serviceId": "MUC-YOGA",
                  "dates": [
                    {
                      "serviceDate": "2021-05-24",
                      "amount": {
                        "amount": 35.0,
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ],
              "prePaymentAmount": {
                "amount": 50.0,
                "currency": "EUR"
              }
            },
            {
              "arrival": "2021-05-24",
              "departure": "2021-05-26",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Eric",
                "middleInitial": "E",
                "lastName": "Steinmetz",
                "email": "eric.e@steinmetz.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "CreditCard",
              "timeSlices": [
                {
                  "ratePlanId": "BER-FLEX-DBL",
                  "totalAmount": {
                    "amount": 120.0,
                    "currency": "EUR"
                  }
                },
                {
                  "ratePlanId": "BER-FLEX-DBL",
                  "totalAmount": {
                    "amount": 125.0,
                    "currency": "EUR"
                  }
                }
              ],
              "companyId": "BER-UMBRELLA",
              "commission": {
                "commissionAmount": {
                  "amount": 20.0,
                  "currency": "EUR"
                },
                "beforeCommissionAmount": {
                  "amount": 100.0,
                  "currency": "EUR"
                }
              }
            }
          ],
          "transactionReference": "564578124534890J"
        }
      properties:
        paymentAccount:
          $ref: '#/components/schemas/CreatePaymentAccountModel'
        booker:
          $ref: '#/components/schemas/BookerModel'
        comment:
          description: Additional information and comments
          type: string
        bookerComment:
          description: Additional information and comments by the booker
          type: string
        reservations:
          description: List of reservations to create
          items:
            $ref: '#/components/schemas/CreateReservationModel'
          type: array
        transactionReference:
          description: The reference of a payment transaction. This should be set
            when a payment transaction has been initiated and should be used to complete
            the transaction upon reservation creation.
          type: string
      required:
      - booker
      - reservations
      type: object
    ReservationCreatedModel:
      properties:
        id:
          description: Id of the reservation
          type: string
      required:
      - id
      type: object
    BookingCreatedModel:
      example: |-
        {
          "id": "XPGMSXGF",
          "reservationIds": [
            {
              "id": "XPGMSXGF-1"
            },
            {
              "id": "XPGMSXGF-2"
            }
          ]
        }
      properties:
        id:
          description: Booking id
          type: string
        reservationIds:
          description: List of ids for newly created reservations
          items:
            $ref: '#/components/schemas/ReservationCreatedModel'
          type: array
      required:
      - id
      - reservationIds
      type: object
    PaymentAccountModel:
      properties:
        accountNumber:
          description: The account number (e.g. masked credit card number or last
            4 digits)
          type: string
        accountHolder:
          description: The account holder (e.g. card holder)
          type: string
        expiryMonth:
          description: The credit card's expiration month
          type: string
        expiryYear:
          description: The credit card's expiration year
          type: string
        paymentMethod:
          description: The payment method (e.g. visa)
          type: string
        payerEmail:
          description: The email address of the shopper / customer
          type: string
        payerReference:
          description: "The payer reference. It is used to make recurring captures\
            \ and its usage is allowed only in the scope of the booking.\r\nFor the\
            \ reason above this is a write-only field."
          type: string
        isVirtual:
          description: Indicates if the payment account is a virtual credit card.
            If not specified it defaults to 'false'
          type: boolean
        isActive:
          description: Indicates if the payment account can be used for capturing
            payments. A payment account is active, when it has a valid payer reference
            set
          type: boolean
        inactiveReason:
          description: A reason why account is inactive
          type: string
      required:
      - isActive
      type: object
    ServiceModel:
      properties:
        id:
          description: The service id
          type: string
        code:
          description: The code for the service
          type: string
        name:
          description: The name for the service
          type: string
        description:
          description: The description for the service
          type: string
        pricingUnit:
          description: Defines the granularity (room, person) for which this item
            is offered and priced
          enum:
          - Room
          - Person
          type: string
          x-ms-enum:
            name: PricedUnit
            modelAsString: false
        defaultGrossPrice:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - code
      - defaultGrossPrice
      - description
      - id
      - name
      - pricingUnit
      type: object
    ServiceDateItemModel:
      properties:
        serviceDate:
          description: The date this service is delivered
          example: 2020-10-10
          format: date
          type: string
        count:
          description: The count of booked services
          format: int32
          type: integer
        amount:
          $ref: '#/components/schemas/AmountModel'
        isMandatory:
          description: "Rate plans can have additional services. When booking an offer\
            \ for such rate plans, those services are automatically booked.\r\nThey\
            \ are marked as mandatory and they cannot be removed."
          type: boolean
      required:
      - amount
      - count
      - isMandatory
      - serviceDate
      type: object
    ReservationServiceItemModel:
      properties:
        service:
          $ref: '#/components/schemas/ServiceModel'
        totalAmount:
          $ref: '#/components/schemas/AmountModel'
        dates:
          description: The dates the service will be delivered with its price
          items:
            $ref: '#/components/schemas/ServiceDateItemModel'
          type: array
      required:
      - dates
      - service
      - totalAmount
      type: object
    ReservationCancellationFeeModel:
      properties:
        id:
          description: The id of the cancellation policy applied
          type: string
        code:
          description: The code of the cancellation policy applied
          type: string
        name:
          description: The name of the cancellation policy applied
          type: string
        description:
          description: The description of the cancellation policy applied
          type: string
        dueDateTime:
          description: "The date and time the cancellation fee will be due. After\
            \ that time this fee will\r\nbe charged in case of cancellation<br />A\
            \ date and time (without fractional second part) in UTC or with UTC offset\
            \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          format: date-time
          type: string
        fee:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - code
      - description
      - dueDateTime
      - fee
      - id
      - name
      type: object
    ReservationNoShowFeeModel:
      properties:
        id:
          description: The id of the no-show policy applied
          type: string
        code:
          description: The code of the no-show policy applied
          type: string
        name:
          description: The name of the no-show policy applied
          type: string
        description:
          description: The description of the no-show policy applied
          type: string
        fee:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - code
      - description
      - fee
      - id
      - name
      type: object
    EmbeddedCompanyModel:
      properties:
        id:
          description: The company ID
          type: string
        code:
          description: The code of the company
          type: string
        name:
          description: The name of the company
          type: string
        canCheckOutOnAr:
          description: Whether or not the company can check out on AR
          type: boolean
      required:
      - id
      type: object
    BookingReservationModel:
      properties:
        id:
          description: Reservation id
          type: string
        status:
          description: Status of the reservation
          enum:
          - Confirmed
          - InHouse
          - CheckedOut
          - Canceled
          - NoShow
          type: string
          x-ms-enum:
            name: ReservationStatus
            modelAsString: false
        externalCode:
          description: Code in external system
          type: string
        channelCode:
          description: Channel code
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        source:
          description: Source of the reservation (e.g Hotels.com, Orbitz, etc.)
          type: string
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        arrival:
          description: Date of arrival<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        departure:
          description: Date of departure<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        adults:
          description: Number of adults
          format: int32
          type: integer
        childrenAges:
          description: The ages of the children
          items:
            format: int32
            type: integer
          type: array
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        services:
          description: The list of additional services (extras, add-ons) reserved
            for the stay
          items:
            $ref: '#/components/schemas/ReservationServiceItemModel'
          type: array
        guestComment:
          description: Additional information and comment by the guest
          type: string
        cancellationFee:
          $ref: '#/components/schemas/ReservationCancellationFeeModel'
        noShowFee:
          $ref: '#/components/schemas/ReservationNoShowFeeModel'
        company:
          $ref: '#/components/schemas/EmbeddedCompanyModel'
      required:
      - adults
      - arrival
      - cancellationFee
      - channelCode
      - departure
      - id
      - noShowFee
      - property
      - ratePlan
      - status
      - totalGrossAmount
      - unitGroup
      type: object
    BookingItemModel:
      description: A booking holds all shared metadata for a set of reservations
      properties:
        id:
          description: Booking id
          type: string
        groupId:
          description: Group id
          type: string
        booker:
          $ref: '#/components/schemas/BookerModel'
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        comment:
          description: Additional information and comments
          type: string
        bookerComment:
          description: Additional information and comment by the booker
          type: string
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        reservations:
          description: Reservations within this booking
          items:
            $ref: '#/components/schemas/BookingReservationModel'
          type: array
      required:
      - created
      - id
      - modified
      type: object
    BookingListModel:
      example: |-
        {
          "bookings": [
            {
              "id": "XPGMSXGF",
              "booker": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 5",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "paymentAccount": {
                "accountNumber": "1111",
                "accountHolder": "John Doe",
                "expiryMonth": "8",
                "expiryYear": "2018",
                "paymentMethod": "visa",
                "payerEmail": "s.hopper@test.com",
                "isVirtual": false,
                "isActive": false
              },
              "comment": "The comment from the front desk or reservation office",
              "bookerComment": "The comment from the booker provided via the booking channel",
              "created": "0001-01-01T00:00:00Z",
              "modified": "0001-01-01T00:00:00Z",
              "reservations": [
                {
                  "id": "XPGMSXGF-1",
                  "status": "Confirmed",
                  "externalCode": "345343345|334",
                  "channelCode": "BookingCom",
                  "arrival": "2021-05-23T17:00:00+02:00",
                  "departure": "2021-05-25T11:00:00+02:00",
                  "adults": 1,
                  "childrenAges": [
                    6
                  ],
                  "totalGrossAmount": {
                    "amount": 130.0,
                    "currency": "EUR"
                  },
                  "property": {
                    "id": "MUC",
                    "code": "MUC",
                    "name": "Demo Hotel Munich",
                    "description": "This is the demo hotel Munich"
                  },
                  "ratePlan": {
                    "id": "MUC-NONREF_DBL",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "Non Refundable",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double"
                  },
                  "guestComment": "The comment from the guest provided via the booking channel",
                  "cancellationFee": {
                    "id": "MUC-FLE",
                    "code": "FLE",
                    "name": "Flexible",
                    "description": "Free cancellation until 36 hours before arrival.",
                    "dueDateTime": "2021-05-23T17:00:00+02:00",
                    "fee": {
                      "amount": 30.0,
                      "currency": "EUR"
                    }
                  },
                  "noShowFee": {
                    "id": "MUC-NONREF",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "No free no-show",
                    "fee": {
                      "amount": 130.0,
                      "currency": "EUR"
                    }
                  }
                }
              ]
            }
          ],
          "count": 1
        }
      properties:
        bookings:
          items:
            $ref: '#/components/schemas/BookingItemModel'
          type: array
        count:
          description: Total count of items
          format: int64
          type: integer
      required:
      - bookings
      - count
      type: object
    AddReservationsModel:
      description: With this request you can add reservations to an existing booking
      example: |-
        {
          "reservations": [
            {
              "arrival": "2021-05-23",
              "departure": "2021-05-25",
              "adults": 1,
              "comment": "I need a wake up service",
              "externalCode": "812864414|381",
              "channelCode": "BookingCom",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "Prepayment",
              "timeSlices": [
                {
                  "ratePlanId": "MUC-NONREF-DBL"
                },
                {
                  "ratePlanId": "MUC-NONREF-DBL"
                }
              ],
              "services": [
                {
                  "serviceId": "MUC-BRKF"
                },
                {
                  "serviceId": "MUC-YOGA",
                  "dates": [
                    {
                      "serviceDate": "2021-05-24",
                      "amount": {
                        "amount": 35.0,
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ],
              "companyId": "UMBRELLA",
              "corporateCode": "UMBRELLA-MUC_NONREF_DBL"
            },
            {
              "arrival": "2021-05-24",
              "departure": "2021-05-26",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Eric",
                "middleInitial": "E",
                "lastName": "Steinmetz",
                "email": "eric.e@steinmetz.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "CreditCard",
              "timeSlices": [
                {
                  "ratePlanId": "BER-FLEX-DBL"
                },
                {
                  "ratePlanId": "BER-FLEX-DBL"
                }
              ],
              "commission": {
                "commissionAmount": {
                  "amount": 20.0,
                  "currency": "EUR"
                },
                "beforeCommissionAmount": {
                  "amount": 100.0,
                  "currency": "EUR"
                }
              }
            }
          ],
          "transactionReference": "RFEUFHEW"
        }
      properties:
        reservations:
          description: List of reservations to add to the existing booking
          items:
            $ref: '#/components/schemas/CreateReservationModel'
          type: array
        transactionReference:
          description: The reference of a payment transaction. This should be set
            when a payment transaction has been initiated and should be used to complete
            the transaction upon reservation creation.
          type: string
      required:
      - reservations
      type: object
    ReservationsCreatedModel:
      example: |-
        {
          "reservationIds": [
            {
              "id": "XPGMSXGF-1"
            },
            {
              "id": "XPGMSXGF-2"
            }
          ]
        }
      properties:
        reservationIds:
          description: List of ids for newly created reservations
          items:
            $ref: '#/components/schemas/ReservationCreatedModel'
          type: array
      required:
      - reservationIds
      type: object
    PropertyValueModel:
      properties:
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        balance:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - balance
      - property
      - totalGrossAmount
      type: object
    BookingModel:
      description: A booking holds all shared metadata for a set of reservations
      example: |-
        {
          "id": "XPGMSXGF",
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 5",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "isVirtual": false,
            "isActive": false
          },
          "comment": "The comment from the front desk or reservation office",
          "bookerComment": "The comment from the booker provided via the booking channel",
          "created": "0001-01-01T00:00:00Z",
          "modified": "0001-01-01T00:00:00Z",
          "reservations": [
            {
              "id": "XPGMSXGF-1",
              "status": "Confirmed",
              "externalCode": "345343345|334",
              "channelCode": "BookingCom",
              "arrival": "2021-05-23T17:00:00+02:00",
              "departure": "2021-05-25T11:00:00+02:00",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "totalGrossAmount": {
                "amount": 130.0,
                "currency": "EUR"
              },
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-DBL",
                "code": "DBL",
                "name": "Double",
                "description": "Double"
              },
              "guestComment": "The comment from the guest provided via the booking channel",
              "company": {
                "id": "MUC-UMBRELLA",
                "code": "UMBRELLA",
                "name": "Umbrella Corp.",
                "canCheckOutOnAr": true
              }
            }
          ]
        }
      properties:
        id:
          description: Booking id
          type: string
        groupId:
          description: Group id
          type: string
        booker:
          $ref: '#/components/schemas/BookerModel'
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        comment:
          description: Additional information and comments
          type: string
        bookerComment:
          description: Additional information and comment by the booker
          type: string
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        propertyValues:
          description: Property specific values like total amount and balance
          items:
            $ref: '#/components/schemas/PropertyValueModel'
          type: array
        reservations:
          description: Reservations within this booking
          items:
            $ref: '#/components/schemas/BookingReservationModel'
          type: array
      required:
      - created
      - id
      - modified
      type: object
    CreateGroupModel:
      description: With this request you can create a group booking request
      example: |-
        {
          "name": "apaleo Summer Festival 2022",
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 1",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "payerReference": "4ea6462b-cca3-4c17-a035-c7b5132db83c",
            "isVirtual": false
          },
          "propertyIds": [
            "MUC"
          ]
        }
      properties:
        name:
          description: Name of the group
          type: string
        booker:
          $ref: '#/components/schemas/BookerModel'
        comment:
          description: Additional information and comments
          type: string
        bookerComment:
          description: Additional information and comment by the booker
          type: string
        paymentAccount:
          $ref: '#/components/schemas/CreatePaymentAccountModel'
        propertyIds:
          description: List of property ids the group booking belongs to
          items:
            type: string
          type: array
      required:
      - booker
      - name
      - propertyIds
      type: object
    GroupCreatedModel:
      example: |-
        {
          "id": "XPGMSXGF"
        }
      properties:
        id:
          description: Id of newly created group booking
          type: string
      required:
      - id
      type: object
    GroupBlockModel:
      properties:
        id:
          description: Block id
          type: string
        status:
          description: Status of the block
          enum:
          - Tentative
          - Definite
          - Canceled
          type: string
          x-ms-enum:
            name: BlockStatus
            modelAsString: false
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        grossDailyRate:
          $ref: '#/components/schemas/MonetaryValueModel'
        from:
          description: Start date and time from which the inventory will be blocked<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: End date and time until which the inventory will be blocked<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        blockedUnits:
          description: Number of units blocked
          format: int32
          type: integer
        pickedReservations:
          description: Number of reservations already picked from this block
          format: int32
          type: integer
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
      required:
      - blockedUnits
      - created
      - from
      - grossDailyRate
      - id
      - modified
      - pickedReservations
      - property
      - ratePlan
      - status
      - to
      - unitGroup
      type: object
    ActionReasonModel[NotAllowedGroupActionReason]:
      properties:
        code:
          enum:
          - DeleteNotAllowedForGroupWithBlocks
          type: string
          x-ms-enum:
            name: NotAllowedGroupActionReason
            modelAsString: false
        message:
          type: string
      required:
      - code
      - message
      type: object
    ActionModel[GroupAction,NotAllowedGroupActionReason]:
      properties:
        action:
          enum:
          - Delete
          type: string
          x-ms-enum:
            name: GroupAction
            modelAsString: false
        isAllowed:
          type: boolean
        reasons:
          items:
            $ref: '#/components/schemas/ActionReasonModel[NotAllowedGroupActionReason]'
          type: array
      required:
      - action
      - isAllowed
      type: object
    GroupItemModel:
      properties:
        id:
          description: Group id
          type: string
        from:
          description: Start date and time of the earliest block for this group<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: End date and time of the latest block for this group<br />A
            date and time (without fractional second part) in UTC or with UTC offset
            as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        name:
          description: Name of the group
          type: string
        booker:
          $ref: '#/components/schemas/BookerModel'
        comment:
          description: Additional information and comments
          type: string
        bookerComment:
          description: Additional information and comment by the booker
          type: string
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        blocks:
          description: Blocks within this group
          items:
            $ref: '#/components/schemas/GroupBlockModel'
          type: array
        actions:
          description: The list of actions for this group
          items:
            $ref: '#/components/schemas/ActionModel[GroupAction,NotAllowedGroupActionReason]'
          type: array
        propertyIds:
          description: The list of property ids this group belongs to
          items:
            type: string
          type: array
      required:
      - created
      - id
      - modified
      - name
      - propertyIds
      type: object
    GroupListModel:
      example: |-
        {
          "groups": [
            {
              "id": "XPGMSXGF",
              "name": "apaleo Summer Festival 2022",
              "booker": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 5",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "paymentAccount": {
                "accountNumber": "1111",
                "accountHolder": "John Doe",
                "expiryMonth": "8",
                "expiryYear": "2018",
                "paymentMethod": "visa",
                "payerEmail": "s.hopper@test.com",
                "isVirtual": false,
                "isActive": false
              },
              "created": "0001-01-01T00:00:00Z",
              "modified": "0001-01-01T00:00:00Z"
            }
          ],
          "count": 1
        }
      properties:
        groups:
          items:
            $ref: '#/components/schemas/GroupItemModel'
          type: array
        count:
          description: Total count of items
          format: int64
          type: integer
      required:
      - count
      - groups
      type: object
    GroupModel:
      example: |-
        {
          "id": "XPGMSXGF",
          "name": "apaleo Summer Festival 2022",
          "from": "2021-05-26T16:41:01.1149858+02:00",
          "to": "2021-06-02T16:41:01.1149858+02:00",
          "booker": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 5",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "isVirtual": false,
            "isActive": false
          },
          "created": "0001-01-01T00:00:00Z",
          "modified": "0001-01-01T00:00:00Z",
          "blocks": [
            {
              "id": "MUC-HSGTDG",
              "status": "Tentative",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_SGL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard"
              },
              "grossDailyRate": {
                "amount": 160.0,
                "currency": "EUR"
              },
              "from": "2021-05-26T16:41:01.1149858+02:00",
              "to": "2021-05-31T16:41:01.1149858+02:00",
              "blockedUnits": 10,
              "pickedReservations": 0,
              "created": "2021-05-21T16:41:01.1149858+02:00",
              "modified": "2021-05-21T16:41:01.1149858+02:00"
            },
            {
              "id": "MUC-JAIULS",
              "status": "Definite",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-DBL",
                "code": "DBL",
                "name": "Double",
                "description": "Double"
              },
              "grossDailyRate": {
                "amount": 190.0,
                "currency": "EUR"
              },
              "from": "2021-05-27T16:41:01.1149858+02:00",
              "to": "2021-06-02T16:41:01.1149858+02:00",
              "blockedUnits": 8,
              "pickedReservations": 3,
              "created": "2021-05-21T16:41:01.1149858+02:00",
              "modified": "2021-05-21T16:41:01.1149858+02:00"
            }
          ],
          "propertyIds": [
            "MUC"
          ]
        }
      properties:
        id:
          description: Group id
          type: string
        name:
          description: Name of the group
          type: string
        from:
          description: Start date and time of the earliest block for this group<br
            />A date and time (without fractional second part) in UTC or with UTC
            offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: End date and time of the latest block for this group<br />A
            date and time (without fractional second part) in UTC or with UTC offset
            as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        booker:
          $ref: '#/components/schemas/BookerModel'
        comment:
          description: Additional information and comments
          type: string
        bookerComment:
          description: Additional information and comment by the booker
          type: string
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        blocks:
          description: Blocks within this group
          items:
            $ref: '#/components/schemas/GroupBlockModel'
          type: array
        actions:
          description: The list of actions for this group
          items:
            $ref: '#/components/schemas/ActionModel[GroupAction,NotAllowedGroupActionReason]'
          type: array
        propertyIds:
          description: The list of property ids this group belongs to
          items:
            type: string
          type: array
      required:
      - created
      - id
      - modified
      - name
      - propertyIds
      type: object
    PickUpReservationModel:
      description: With this request you can pick up a reservation
      properties:
        blockId:
          description: ID of the block
          type: string
        services:
          description: Additional services (extras, add-ons) that should be added
            to the reservation
          items:
            $ref: '#/components/schemas/BookReservationServiceModel'
          type: array
        arrival:
          description: Date of arrival and the optional time with UTC offset<br />Specify
            either a pure date or a date and time (without fractional second part)
            in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        departure:
          description: Date of departure and the optional time with UTC offset<br
            />Specify either a pure date or a date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        adults:
          description: Number of adults
          format: int32
          type: integer
        childrenAges:
          description: The ages of the children
          items:
            format: int32
            type: integer
          type: array
        comment:
          description: Additional information and comments
          type: string
        guestComment:
          description: Additional information and comment by the guest
          type: string
        primaryGuest:
          $ref: '#/components/schemas/GuestModel'
        additionalGuests:
          description: Additional guests of the reservation.
          items:
            $ref: '#/components/schemas/GuestModel'
          type: array
        travelPurpose:
          description: The purpose of the trip, leisure or business
          enum:
          - Business
          - Leisure
          type: string
          x-ms-enum:
            name: TravelPurpose
            modelAsString: false
      required:
      - adults
      - arrival
      - blockId
      - departure
      type: object
    PickUpReservationsModel:
      description: With this request you can pick up reservations to an existing group
        booking
      example: |-
        {
          "reservations": [
            {
              "blockId": "MUC-QJNXJR",
              "arrival": "2021-05-23",
              "departure": "2021-05-25",
              "adults": 1,
              "comment": "I need a wake up service",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                },
                "company": {
                  "name": "Company GmbH",
                  "taxId": "1442"
                }
              }
            },
            {
              "blockId": "MUC-WKMCKT",
              "arrival": "2021-05-24",
              "departure": "2021-05-26",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Eric",
                "middleInitial": "E",
                "lastName": "Steinmetz",
                "email": "eric.e@steinmetz.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 1",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              }
            }
          ]
        }
      properties:
        reservations:
          description: List of reservations to pick up to the existing group booking
          items:
            $ref: '#/components/schemas/PickUpReservationModel'
          type: array
      required:
      - reservations
      type: object
    OfferUnitGroupModel:
      properties:
        id:
          description: The unit group id
          type: string
        code:
          description: The code for the unit group that can be shown in reports and
            table views
          type: string
        name:
          description: The name for the unit group
          type: string
        description:
          description: The description for the unit group
          type: string
        maxPersons:
          description: Maximum number of persons for the unit group
          format: int32
          type: integer
        rank:
          description: The unit group rank
          format: int32
          type: integer
      required:
      - code
      - description
      - id
      - maxPersons
      - name
      type: object
    OfferCancellationFeeModel:
      properties:
        code:
          description: The code of the cancellation policy applied
          type: string
        name:
          description: The name of the cancellation policy applied
          type: string
        description:
          description: The description of the cancellation policy applied
          type: string
        dueDateTime:
          description: "The date and time the cancellation fee will be due. After\
            \ that time this fee will\r\nbe charged in case of cancellation<br />A\
            \ date and time (without fractional second part) in UTC or with UTC offset\
            \ as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          format: date-time
          type: string
        fee:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - code
      - description
      - dueDateTime
      - fee
      - name
      type: object
    OfferNoShowFeeModel:
      properties:
        code:
          description: The code of the no-show policy applied
          type: string
        name:
          description: The name of the no-show policy applied
          type: string
        description:
          description: The description of the no-show policy applied
          type: string
        fee:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - code
      - description
      - fee
      - name
      type: object
    EmbeddedServiceModel:
      properties:
        id:
          description: The service id
          type: string
        code:
          description: The code for the service
          type: string
        name:
          description: The name for the service
          type: string
        description:
          description: The description for the service
          type: string
      required:
      - id
      type: object
    OfferServiceModel:
      properties:
        service:
          $ref: '#/components/schemas/EmbeddedServiceModel'
        serviceDate:
          description: The date this service is delivered
          example: 2020-10-10
          format: date
          type: string
        count:
          description: The default count of offered services. For services whose pricing
            unit is 'Person' it will be based on the adults and children specified,
            otherwise 1.
          format: int32
          type: integer
        amount:
          $ref: '#/components/schemas/AmountModel'
        pricingMode:
          description: Whether the service price is included in or added to the base
            rate
          enum:
          - Included
          - Additional
          type: string
          x-ms-enum:
            name: PricingMode
            modelAsString: false
      required:
      - amount
      - count
      - pricingMode
      - service
      - serviceDate
      type: object
    OfferTimeSliceModel:
      properties:
        from:
          description: The start date and time for this time slice<br />A date and
            time (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: The end date and time for this time slice<br />A date and time
            (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        availableUnits:
          description: The number of available units for that time slice
          format: int32
          type: integer
        baseAmount:
          $ref: '#/components/schemas/AmountModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        includedServices:
          description: The breakdown for services included in the offer
          items:
            $ref: '#/components/schemas/OfferServiceModel'
          type: array
      required:
      - availableUnits
      - baseAmount
      - from
      - to
      - totalGrossAmount
      type: object
    OfferFeeModel:
      properties:
        id:
          description: The fee id
          type: string
        code:
          description: The code for the fee
          type: string
        name:
          description: The name for the fee
          type: string
        totalAmount:
          $ref: '#/components/schemas/AmountModel'
      required:
      - code
      - id
      - name
      - totalAmount
      type: object
    ServiceOfferItemModel:
      properties:
        serviceDate:
          description: The date this service is delivered
          example: 2020-10-10
          format: date
          type: string
        amount:
          $ref: '#/components/schemas/AmountModel'
        isDefaultDate:
          description: "Depending on the postNextDay setting of the service it will\
            \ by default be posted before or after midnight.\r\nBreakfast is usually\
            \ delivered on the next morning, so all the dates from the day after arrival\
            \ to the departure day\r\nare default dates and will have this flag set\
            \ to true. Those are also the dates the service will be booked for if\r\
            \nyou do not specify dates in the book-service call. Still, you can override\
            \ this and also book the dates set to IsDefaultDate = false."
          type: boolean
        isMandatory:
          description: "Rate plans can have additional services. When booking an offer\
            \ for such rate plans, those services are automatically booked.\r\nThey\
            \ are marked as mandatory and they cannot be removed."
          type: boolean
      required:
      - amount
      - isDefaultDate
      - isMandatory
      - serviceDate
      type: object
    ServiceOfferModel:
      properties:
        service:
          $ref: '#/components/schemas/ServiceModel'
        count:
          description: The default count of offered services. For services whose pricing
            unit is 'Person' it will be based on the adults and children specified,
            otherwise 1.
          format: int32
          type: integer
        totalAmount:
          $ref: '#/components/schemas/AmountModel'
        prePaymentAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        fees:
          description: The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.ServiceOffer.ServiceOfferModel.TotalAmount
            when booking the service
          items:
            $ref: '#/components/schemas/OfferFeeModel'
          type: array
        dates:
          description: The dates the service will be delivered with its price
          items:
            $ref: '#/components/schemas/ServiceOfferItemModel'
          type: array
      required:
      - count
      - dates
      - prePaymentAmount
      - service
      - totalAmount
      type: object
    TaxDetailModel:
      properties:
        vatType:
          enum:
          - "Null"
          - VeryReduced
          - Reduced
          - Normal
          - Without
          - Special
          - ReducedCovid19
          - NormalCovid19
          type: string
          x-ms-enum:
            name: VatType
            modelAsString: false
        vatPercent:
          format: double
          type: number
        net:
          $ref: '#/components/schemas/MonetaryValueModel'
        tax:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - net
      - tax
      - vatPercent
      - vatType
      type: object
    OfferValidationMessageModel:
      properties:
        code:
          description: The message Code
          enum:
          - UnitGroupFullyBooked
          - UnitGroupCapacityExceeded
          - RatePlanRestrictionsViolated
          - RatePlanSurchargesNotSet
          - RateRestrictionsViolated
          - RatePlanChannelNotSet
          - RatesNotSet
          - BlockFullyBooked
          - IncludedServicesAmountExceededRateAmount
          type: string
          x-ms-enum:
            name: OfferValidationMessageCode
            modelAsString: false
        message:
          description: The message description
          type: string
      required:
      - code
      - message
      type: object
    OfferModel:
      properties:
        arrival:
          description: The earliest arrival date and time for this offer<br />A date
            and time (without fractional second part) in UTC or with UTC offset as
            defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        departure:
          description: The latest departure date and time for this offer<br />A date
            and time (without fractional second part) in UTC or with UTC offset as
            defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        unitGroup:
          $ref: '#/components/schemas/OfferUnitGroupModel'
        minGuaranteeType:
          description: The minimum guarantee type for this offer
          enum:
          - PM6Hold
          - CreditCard
          - Prepayment
          - Company
          type: string
          x-ms-enum:
            name: MinGuaranteeType
            modelAsString: false
        availableUnits:
          description: The number of available units for that offer
          format: int32
          type: integer
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        cancellationFee:
          $ref: '#/components/schemas/OfferCancellationFeeModel'
        noShowFee:
          $ref: '#/components/schemas/OfferNoShowFeeModel'
        timeSlices:
          description: The breakdown for each time slice for this offer
          items:
            $ref: '#/components/schemas/OfferTimeSliceModel'
          type: array
        services:
          description: The list of the mandatory services for this offer. Such services
            will be automatically booked when booking this offer
          items:
            $ref: '#/components/schemas/ServiceOfferModel'
          type: array
        fees:
          description: The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.StayOffer.OfferModel.TotalGrossAmount
            when creating the booking
          items:
            $ref: '#/components/schemas/OfferFeeModel'
          type: array
        taxDetails:
          description: Tax breakdown, displaying net and tax amount for each VAT type
          items:
            $ref: '#/components/schemas/TaxDetailModel'
          type: array
        validationMessages:
          description: Validation rules that were applied to the offer and show the
            reason why the offer is not bookable
          items:
            $ref: '#/components/schemas/OfferValidationMessageModel'
          type: array
        companyId:
          description: ID of the company the offer is created for
          type: string
        corporateCode:
          description: The corporate rate code the offer is created for
          type: string
        isCorporate:
          description: Whether the offer is for a corporate rate plan
          type: boolean
        prePaymentAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        cityTax:
          $ref: '#/components/schemas/AmountModel'
      required:
      - arrival
      - availableUnits
      - cancellationFee
      - departure
      - isCorporate
      - minGuaranteeType
      - noShowFee
      - prePaymentAmount
      - ratePlan
      - taxDetails
      - timeSlices
      - totalGrossAmount
      - unitGroup
      type: object
    StayOffersModel:
      example: |-
        {
          "property": {
            "id": "MUC",
            "code": "MUC",
            "name": "Demo Hotel Munich",
            "description": "This is the demo hotel Munich"
          },
          "offers": [
            {
              "arrival": "2021-05-23T17:00:00+02:00",
              "departure": "2021-05-25T11:00:00+02:00",
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard",
                "maxPersons": 1,
                "rank": 2
              },
              "minGuaranteeType": "PM6Hold",
              "availableUnits": 4,
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "totalGrossAmount": {
                "amount": 214.0,
                "currency": "EUR"
              },
              "cancellationFee": {
                "code": "FLEX",
                "name": "Flexible",
                "description": "Free cancellation.",
                "dueDateTime": "2021-05-23T17:00:00+02:00",
                "fee": {
                  "amount": 214.0,
                  "currency": "EUR"
                }
              },
              "noShowFee": {
                "code": "NOSHOW",
                "name": "Non Refundable",
                "description": "No free no-show",
                "fee": {
                  "amount": 214.0,
                  "currency": "EUR"
                }
              },
              "timeSlices": [
                {
                  "from": "2021-05-23T17:00:00+02:00",
                  "to": "2021-05-24T11:00:00+02:00",
                  "availableUnits": 4,
                  "baseAmount": {
                    "grossAmount": 59.00,
                    "netAmount": 55.14,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 50.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    }
                  ]
                },
                {
                  "from": "2021-05-24T11:00:00+02:00",
                  "to": "2021-05-25T11:00:00+02:00",
                  "availableUnits": 5,
                  "baseAmount": {
                    "grossAmount": 59.00,
                    "netAmount": 55.14,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 50.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    },
                    {
                      "service": {
                        "id": "MUC-CLEANING"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 25.0,
                        "netAmount": 21.01,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "pricingMode": "Additional"
                    }
                  ]
                }
              ],
              "taxDetails": [
                {
                  "vatType": "Reduced",
                  "vatPercent": 14.0,
                  "net": {
                    "amount": 100.0,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 14.0,
                    "currency": "EUR"
                  }
                }
              ],
              "isCorporate": false,
              "prePaymentAmount": {
                "amount": 0.0,
                "currency": "EUR"
              }
            },
            {
              "arrival": "2021-05-23T17:00:00+02:00",
              "departure": "2021-05-25T11:00:00+02:00",
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard",
                "maxPersons": 1,
                "rank": 2
              },
              "minGuaranteeType": "Prepayment",
              "availableUnits": 4,
              "ratePlan": {
                "id": "MUC-FLEX-DBL",
                "code": "FLEX",
                "name": "Flexible",
                "description": "Flexible",
                "isSubjectToCityTax": false
              },
              "totalGrossAmount": {
                "amount": 321.0,
                "currency": "EUR"
              },
              "cancellationFee": {
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Full stay amount due 24 hours after booking.",
                "dueDateTime": "2021-05-22T16:41:01.1149858+02:00",
                "fee": {
                  "amount": 321.0,
                  "currency": "EUR"
                }
              },
              "noShowFee": {
                "code": "NOSHOW",
                "name": "Non Refundable",
                "description": "No free no-show",
                "fee": {
                  "amount": 107.0,
                  "currency": "EUR"
                }
              },
              "timeSlices": [
                {
                  "from": "2021-05-23T17:00:00+02:00",
                  "to": "2021-05-24T11:00:00+02:00",
                  "availableUnits": 4,
                  "baseAmount": {
                    "grossAmount": 124.00,
                    "netAmount": 115.89,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 100.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    }
                  ]
                },
                {
                  "from": "2021-05-24T11:00:00+02:00",
                  "to": "2021-05-25T11:00:00+02:00",
                  "availableUnits": 5,
                  "baseAmount": {
                    "grossAmount": 124.00,
                    "netAmount": 115.89,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 100.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "pricingMode": "Included"
                    },
                    {
                      "service": {
                        "id": "MUC-CLEANING"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 25.0,
                        "netAmount": 21.01,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "pricingMode": "Additional"
                    }
                  ]
                }
              ],
              "taxDetails": [
                {
                  "vatType": "Reduced",
                  "vatPercent": 14.0,
                  "net": {
                    "amount": 100.0,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 14.0,
                    "currency": "EUR"
                  }
                },
                {
                  "vatType": "Null",
                  "vatPercent": 0.0,
                  "net": {
                    "amount": 100.0,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 0.0,
                    "currency": "EUR"
                  }
                }
              ],
              "isCorporate": false,
              "prePaymentAmount": {
                "amount": 321.0,
                "currency": "EUR"
              }
            }
          ]
        }
      properties:
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        offers:
          description: List of offered unit groups with rates
          items:
            $ref: '#/components/schemas/OfferModel'
          type: array
      required:
      - offers
      - property
      type: object
    ServiceOffersModel:
      example: |-
        {
          "services": [
            {
              "service": {
                "id": "MUC-WLAN",
                "code": "WLAN",
                "name": "High-Speed WLAN",
                "description": "Upgrade the complimentary internet access to a high speed connection.",
                "pricingUnit": "Room",
                "defaultGrossPrice": {
                  "amount": 5.0,
                  "currency": "EUR"
                }
              },
              "count": 1,
              "totalAmount": {
                "grossAmount": 20.0,
                "netAmount": 16.8,
                "vatType": "Normal",
                "vatPercent": 19.0,
                "currency": "EUR"
              },
              "prePaymentAmount": {
                "amount": 20.0,
                "currency": "EUR"
              },
              "dates": [
                {
                  "serviceDate": "2021-05-21",
                  "amount": {
                    "grossAmount": 10.0,
                    "netAmount": 8.4,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "isDefaultDate": false,
                  "isMandatory": false
                },
                {
                  "serviceDate": "2021-05-22",
                  "amount": {
                    "grossAmount": 10.0,
                    "netAmount": 8.4,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "isDefaultDate": false,
                  "isMandatory": false
                }
              ]
            },
            {
              "service": {
                "id": "MUC-YOGA",
                "code": "YOGA",
                "name": "Sun Salutation",
                "description": "Start the day with a private Yoga session with one of our certified trainers.",
                "pricingUnit": "Person",
                "defaultGrossPrice": {
                  "amount": 35.0,
                  "currency": "EUR"
                }
              },
              "count": 1,
              "totalAmount": {
                "grossAmount": 30.0,
                "netAmount": 25.2,
                "vatType": "Normal",
                "vatPercent": 19.0,
                "currency": "EUR"
              },
              "prePaymentAmount": {
                "amount": 30.0,
                "currency": "EUR"
              },
              "dates": [
                {
                  "serviceDate": "2021-05-22",
                  "amount": {
                    "grossAmount": 30.0,
                    "netAmount": 25.2,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "isDefaultDate": false,
                  "isMandatory": false
                }
              ]
            }
          ]
        }
      properties:
        services:
          items:
            $ref: '#/components/schemas/ServiceOfferModel'
          type: array
      required:
      - services
      type: object
    PeriodModel:
      properties:
        hours:
          description: The number of hours within the period
          format: int64
          type: integer
        days:
          description: The number of days within the period
          format: int32
          type: integer
        months:
          description: The number of months within the period
          format: int32
          type: integer
      type: object
    RateRestrictionsModel:
      properties:
        minLengthOfStay:
          description: "The minimum length of stay in order to book the rate. If at\
            \ least this number\r\nof time slices are covered by the stay duration\
            \ the rate will be offered."
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
        maxLengthOfStay:
          description: "The maximum length of stay in order to book the rate. If not\
            \ more than this number\r\nof time slices are covered by the stay duration\
            \ the rate will be offered."
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
        closed:
          description: Whether the rate can be booked for a stay-through reservation
          type: boolean
        closedOnArrival:
          description: Whether the rate can be booked on the reservation's arrival
            date
          type: boolean
        closedOnDeparture:
          description: Whether the rate can be booked on the reservation's departure
            date
          type: boolean
      required:
      - closed
      - closedOnArrival
      - closedOnDeparture
      type: object
    TaxesModel:
      properties:
        tax:
          description: The amount of taxes, which are VAT or Sales Taxes depending
            on the country of the property
          format: double
          type: number
        cityTax:
          description: The amount of City Tax including VAT
          format: double
          type: number
      required:
      - cityTax
      - tax
      type: object
    PriceModel:
      example: |-
        {
          "grossAmount": 100.0,
          "beforeTax": 91.57,
          "afterTax": 101.71,
          "taxes": {
            "tax": 8.43,
            "cityTax": 1.71
          },
          "currency": "USD"
        }
      properties:
        grossAmount:
          description: 'Price including all included services and VAT - <b>DEPRECATED:
            This field will be removed soon, use BeforeTax + Taxes.Tax instead</b>'
          format: double
          type: number
        beforeTax:
          description: Price including all included services without VAT or any other
            taxes like city tax
          format: double
          type: number
        afterTax:
          description: Price including all included services, VAT and any other taxes
            like city tax
          format: double
          type: number
        taxes:
          $ref: '#/components/schemas/TaxesModel'
        currency:
          description: The currency for all prices and tax details
          type: string
      required:
      - afterTax
      - beforeTax
      - currency
      - grossAmount
      - taxes
      type: object
    PerOccupancyPriceItemModel:
      properties:
        adults:
          description: Number of adults
          format: int32
          type: integer
        price:
          $ref: '#/components/schemas/PriceModel'
      required:
      - adults
      - price
      type: object
    TimeSliceOfferItemModel:
      properties:
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        minGuaranteeType:
          description: The minimum guarantee type for the offer
          enum:
          - PM6Hold
          - CreditCard
          - Prepayment
          - Company
          - Ota
          type: string
          x-ms-enum:
            name: GuaranteeType
            modelAsString: false
        minAdvance:
          $ref: '#/components/schemas/PeriodModel'
        maxAdvance:
          $ref: '#/components/schemas/PeriodModel'
        available:
          description: The number of available units for the offer
          format: int32
          type: integer
        restrictions:
          $ref: '#/components/schemas/RateRestrictionsModel'
        prices:
          description: The prices for this offer
          items:
            $ref: '#/components/schemas/PerOccupancyPriceItemModel'
          type: array
      required:
      - available
      - unitGroup
      type: object
    TimeSliceItemModel:
      properties:
        from:
          description: Date and time the time slice begins<br />A date and time (without
            fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: Date and time the time slice ends<br />A date and time (without
            fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        offers:
          description: List of offers for this time slice
          items:
            $ref: '#/components/schemas/TimeSliceOfferItemModel'
          type: array
      required:
      - from
      - to
      type: object
    TimeSliceListModel:
      example: |-
        {
          "timeSlices": [
            {
              "from": "2021-05-21T17:00:00+02:00",
              "to": "2021-05-22T11:00:00+02:00",
              "offers": [
                {
                  "unitGroup": {
                    "id": "MUC-SGL",
                    "code": "SGL",
                    "name": "Standard",
                    "description": "Standard"
                  },
                  "minGuaranteeType": "PM6Hold",
                  "available": 4,
                  "restrictions": {
                    "minLengthOfStay": 2,
                    "maxLengthOfStay": 30,
                    "closed": false,
                    "closedOnArrival": true,
                    "closedOnDeparture": true
                  },
                  "prices": [
                    {
                      "adults": 1,
                      "price": {
                        "grossAmount": 123.0,
                        "beforeTax": 111.81,
                        "afterTax": 133.0,
                        "taxes": {
                          "tax": 11.19,
                          "cityTax": 10.0
                        },
                        "currency": "EUR"
                      }
                    },
                    {
                      "adults": 2,
                      "price": {
                        "grossAmount": 170.0,
                        "beforeTax": 154.54,
                        "afterTax": 180.0,
                        "taxes": {
                          "tax": 15.46,
                          "cityTax": 10.0
                        },
                        "currency": "EUR"
                      }
                    }
                  ]
                },
                {
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double"
                  },
                  "minGuaranteeType": "PM6Hold",
                  "available": 2,
                  "restrictions": {
                    "minLengthOfStay": 2,
                    "maxLengthOfStay": 30,
                    "closed": false,
                    "closedOnArrival": true,
                    "closedOnDeparture": true
                  },
                  "prices": [
                    {
                      "adults": 1,
                      "price": {
                        "grossAmount": 456.0,
                        "beforeTax": 414.54,
                        "afterTax": 466.0,
                        "taxes": {
                          "tax": 41.46,
                          "cityTax": 10.0
                        },
                        "currency": "EUR"
                      }
                    },
                    {
                      "adults": 2,
                      "price": {
                        "grossAmount": 630.0,
                        "beforeTax": 572.72,
                        "afterTax": 610.0,
                        "taxes": {
                          "tax": 57.28,
                          "cityTax": 10.0
                        },
                        "currency": "EUR"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "count": 1
        }
      properties:
        timeSlices:
          description: List of time slices
          items:
            $ref: '#/components/schemas/TimeSliceItemModel'
          type: array
        count:
          description: Total count of items
          format: int64
          type: integer
      required:
      - count
      type: object
    EmbeddedUnitModel:
      properties:
        id:
          description: The unit id
          type: string
        name:
          description: The name for the unit
          type: string
        description:
          description: The description for the unit
          type: string
        unitGroupId:
          description: The unit group id
          type: string
      required:
      - id
      type: object
    ReservationAssignedUnitTimeRangeModel:
      properties:
        from:
          description: The start date and time of the period for which the unit is
            assigned to the reservation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: The end date and time of the period for which the unit is assigned
            to the reservation<br />A date and time (without fractional second part)
            in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
      required:
      - from
      - to
      type: object
    ReservationAssignedUnitModel:
      properties:
        unit:
          $ref: '#/components/schemas/EmbeddedUnitModel'
        timeRanges:
          description: The time ranges for which the unit is assigned to the reservation
          items:
            $ref: '#/components/schemas/ReservationAssignedUnitTimeRangeModel'
          type: array
      required:
      - timeRanges
      - unit
      type: object
    ReservationServiceModel:
      properties:
        service:
          $ref: '#/components/schemas/EmbeddedServiceModel'
        serviceDate:
          description: The date this service is delivered
          example: 2020-10-10
          format: date
          type: string
        count:
          description: The count of booked services
          format: int32
          type: integer
        amount:
          $ref: '#/components/schemas/AmountModel'
        bookedAsExtra:
          description: Whether this service is already booked as extra
          type: boolean
      required:
      - amount
      - bookedAsExtra
      - count
      - service
      - serviceDate
      type: object
    ActionReasonModel[NotAllowedReservationTimeSliceActionReason]:
      properties:
        code:
          enum:
          - AmendNotAllowedWhenTimeSliceIsInThePast
          - AmendNotAllowedWhenTimeSliceIsAlreadyPosted
          - AmendNotAllowedForReservationInFinalStatus
          type: string
          x-ms-enum:
            name: NotAllowedReservationTimeSliceActionReason
            modelAsString: false
        message:
          type: string
      required:
      - code
      - message
      type: object
    ActionModel[ReservationTimeSliceAction,NotAllowedReservationTimeSliceActionReason]:
      properties:
        action:
          enum:
          - Amend
          type: string
          x-ms-enum:
            name: ReservationTimeSliceAction
            modelAsString: false
        isAllowed:
          type: boolean
        reasons:
          items:
            $ref: '#/components/schemas/ActionReasonModel[NotAllowedReservationTimeSliceActionReason]'
          type: array
      required:
      - action
      - isAllowed
      type: object
    TimeSliceModel:
      properties:
        from:
          description: The start date and time for this time slice<br />A date and
            time (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: The end date and time for this time slice<br />A date and time
            (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        serviceDate:
          description: The service date for this time slice
          example: 2020-10-10
          format: date
          type: string
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        unit:
          $ref: '#/components/schemas/EmbeddedUnitModel'
        baseAmount:
          $ref: '#/components/schemas/AmountModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        includedServices:
          description: The list of services included in the rate plan (package elements)
          items:
            $ref: '#/components/schemas/ReservationServiceModel'
          type: array
        actions:
          description: The list of actions allowed for this time slice
          items:
            $ref: '#/components/schemas/ActionModel[ReservationTimeSliceAction,NotAllowedReservationTimeSliceActionReason]'
          type: array
      required:
      - baseAmount
      - from
      - ratePlan
      - serviceDate
      - to
      - totalGrossAmount
      - unitGroup
      type: object
    ReservationValidationMessageModel:
      properties:
        category:
          description: The message category
          enum:
          - OfferNotAvailable
          - AutoUnitAssignment
          type: string
          x-ms-enum:
            name: ValidationMessageCategory
            modelAsString: false
        code:
          description: The message Code
          enum:
          - UnitGroupFullyBooked
          - UnitGroupCapacityExceeded
          - RatePlanRestrictionsViolated
          - RatePlanSurchargesNotSet
          - RateRestrictionsViolated
          - RatePlanChannelNotSet
          - RatesNotSet
          - BlockFullyBooked
          - UnitMoved
          - IncludedServicesAmountExceededRateAmount
          - RatePlanCompanyRestrictionsViolated
          type: string
          x-ms-enum:
            name: ValidationMessageCode
            modelAsString: false
        message:
          description: The message description
          type: string
      required:
      - category
      - code
      - message
      type: object
    ActionReasonModel[NotAllowedReservationActionReason]:
      properties:
        code:
          enum:
          - CheckInNotAllowedForReservationNotInStatusConfirmed
          - CheckInNotAllowedBeforeArrivalDate
          - CheckInNotAllowedAfterDepartureDateTime
          - CheckInNotAllowedWithoutUnitAssignedForWholeStay
          - CheckOutNotAllowedForReservationNotInStatusInHouse
          - CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse
          - CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture
          - CancelNotAllowedForReservationNotInStatusConfirmed
          - AmendNotAllowedForNotAmendableTimeSlices
          - AmendArrivalNotAllowedForNotAmendableTimeSlices
          - AmendArrivalNotAllowedForReservationNotInStatusConfirmed
          - AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse
          - AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast
          - NoShowNotAllowedForReservationNotInStatusConfirmed
          - NoShowNotAllowedBeforeArrivalDate
          - AssignUnitNotAllowedForReservationInThePast
          - AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse
          - UnassignUnitNotAllowedForReservationInThePast
          - UnassignUnitNotAllowedForReservationNotInStatusConfirmed
          - UnassignUnitNotAllowedForReservationWithoutUnit
          - RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse
          - RemoveCityTaxNotAllowedForReservationWithPostedCharges
          - RemoveCityTaxNotAllowedForReservationWithoutCityTax
          - AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse
          - AddCityTaxNotAllowedForReservationWithCityTax
          - AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax
          - AddCityTaxNotAllowedForReservationWithPostedCharges
          - RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse
          - RemoveServiceNotAllowedForReservationInThePast
          type: string
          x-ms-enum:
            name: NotAllowedReservationActionReason
            modelAsString: false
        message:
          type: string
      required:
      - code
      - message
      type: object
    ActionModel[ReservationAction,NotAllowedReservationActionReason]:
      properties:
        action:
          enum:
          - CheckIn
          - CheckOut
          - Cancel
          - AmendTimeSlices
          - AmendArrival
          - AmendDeparture
          - NoShow
          - AssignUnit
          - UnassignUnit
          - RemoveCityTax
          - AddCityTax
          - RemoveService
          type: string
          x-ms-enum:
            name: ReservationAction
            modelAsString: false
        isAllowed:
          type: boolean
        reasons:
          items:
            $ref: '#/components/schemas/ActionReasonModel[NotAllowedReservationActionReason]'
          type: array
      required:
      - action
      - isAllowed
      type: object
    ReservationItemModel:
      properties:
        id:
          description: Reservation id
          type: string
        bookingId:
          description: Booking id
          type: string
        blockId:
          description: Block id
          type: string
        groupName:
          description: Name of the group
          type: string
        status:
          description: Status of the reservation
          enum:
          - Confirmed
          - InHouse
          - CheckedOut
          - Canceled
          - NoShow
          type: string
          x-ms-enum:
            name: ReservationStatus
            modelAsString: false
        checkInTime:
          description: Time of check-in<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        checkOutTime:
          description: Time of check-out<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        cancellationTime:
          description: Time of cancellation, if the reservation was canceled<br />A
            date and time (without fractional second part) in UTC or with UTC offset
            as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        noShowTime:
          description: Time of setting no-show reservation status<br />A date and
            time (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        unit:
          $ref: '#/components/schemas/EmbeddedUnitModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        arrival:
          description: Date of arrival<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        departure:
          description: Date of departure<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        adults:
          description: Number of adults
          format: int32
          type: integer
        childrenAges:
          description: The ages of the children
          items:
            format: int32
            type: integer
          type: array
        comment:
          description: Additional information and comments
          type: string
        guestComment:
          description: Additional information and comment by the guest
          type: string
        externalCode:
          description: Code in external system
          type: string
        channelCode:
          description: Channel code
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        source:
          description: Source of the reservation (e.g Hotels.com, Orbitz, etc.)
          type: string
        primaryGuest:
          $ref: '#/components/schemas/GuestModel'
        additionalGuests:
          description: Additional guests of the reservation.
          items:
            $ref: '#/components/schemas/GuestModel'
          type: array
        booker:
          $ref: '#/components/schemas/BookerModel'
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        guaranteeType:
          description: The strongest guarantee for the rate plans booked in this reservation
          enum:
          - PM6Hold
          - CreditCard
          - Prepayment
          - Company
          - Ota
          type: string
          x-ms-enum:
            name: GuaranteeType
            modelAsString: false
        cancellationFee:
          $ref: '#/components/schemas/ReservationCancellationFeeModel'
        noShowFee:
          $ref: '#/components/schemas/ReservationNoShowFeeModel'
        travelPurpose:
          description: The purpose of the trip, leisure or business
          enum:
          - Business
          - Leisure
          type: string
          x-ms-enum:
            name: TravelPurpose
            modelAsString: false
        balance:
          $ref: '#/components/schemas/MonetaryValueModel'
        assignedUnits:
          description: The list of units assigned to this reservation
          items:
            $ref: '#/components/schemas/ReservationAssignedUnitModel'
          type: array
        timeSlices:
          description: The list of time slices with the reserved units / unit groups
            for the stay
          items:
            $ref: '#/components/schemas/TimeSliceModel'
          type: array
        services:
          description: The list of additional services (extras, add-ons) reserved
            for the stay
          items:
            $ref: '#/components/schemas/ReservationServiceItemModel'
          type: array
        validationMessages:
          description: "Validation rules are applied to reservations during their\
            \ lifetime.\r\nFor example a reservation that was created while the house\
            \ or unit group is already fully booked.\r\nWhenever a rule was or is\
            \ currently violated, a validation message will be added to this list.\r\
            \nThey can be deleted whenever the hotel staff worked them off."
          items:
            $ref: '#/components/schemas/ReservationValidationMessageModel'
          type: array
        actions:
          description: The list of actions for this reservation
          items:
            $ref: '#/components/schemas/ActionModel[ReservationAction,NotAllowedReservationActionReason]'
          type: array
        company:
          $ref: '#/components/schemas/EmbeddedCompanyModel'
        corporateCode:
          description: Corporate code provided during creation. Used to find offers
            during amend.
          type: string
        allFoliosHaveInvoice:
          description: Whether all folios of a reservation have an invoice
          type: boolean
        hasCityTax:
          description: Whether the city tax has already been added to the reservation.
            Set to false, if the property does not have city tax configured
          type: boolean
        commission:
          $ref: '#/components/schemas/CommissionModel'
        promoCode:
          description: The promo code associated with a certain special offer used
            to create the reservation
          type: string
      required:
      - adults
      - arrival
      - balance
      - bookingId
      - cancellationFee
      - channelCode
      - created
      - departure
      - guaranteeType
      - hasCityTax
      - id
      - modified
      - noShowFee
      - property
      - ratePlan
      - status
      - totalGrossAmount
      - unitGroup
      type: object
    ReservationListModel:
      example: |-
        {
          "reservations": [
            {
              "id": "XPGMSXGF-1",
              "bookingId": "XPGMSXGF",
              "status": "Confirmed",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard"
              },
              "unit": {
                "id": "MUC-MTA",
                "name": "A.101",
                "description": "Standard room."
              },
              "totalGrossAmount": {
                "amount": 110.0,
                "currency": "EUR"
              },
              "arrival": "2021-05-23T17:00:00+02:00",
              "departure": "2021-05-23T17:00:00+02:00",
              "created": "2021-05-21T16:41:01.1149858+02:00",
              "modified": "2021-05-21T16:41:01.1149858+02:00",
              "adults": 1,
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Mr",
                "gender": "Male",
                "firstName": "Jon",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "john.d@doe.com",
                "phone": "+4989123343",
                "address": {
                  "addressLine1": "My Street 3",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "paymentAccount": {
                "accountNumber": "1111",
                "accountHolder": "John Doe",
                "expiryMonth": "8",
                "expiryYear": "2018",
                "paymentMethod": "visa",
                "payerEmail": "s.hopper@test.com",
                "isVirtual": false,
                "isActive": false
              },
              "guaranteeType": "CreditCard",
              "cancellationFee": {
                "id": "MUC-NONREF",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "100% of the accommodation.",
                "dueDateTime": "2021-05-21T16:41:01.1149858+02:00",
                "fee": {
                  "amount": 110.0,
                  "currency": "EUR"
                }
              },
              "noShowFee": {
                "id": "MUC-NOSHOW",
                "code": "NOSHOW",
                "name": "Non Refundable",
                "description": "No free no-show",
                "fee": {
                  "amount": 110.0,
                  "currency": "EUR"
                }
              },
              "timeSlices": [
                {
                  "from": "2021-05-23T17:00:00+02:00",
                  "to": "2021-05-24T17:00:00+02:00",
                  "serviceDate": "2021-05-23",
                  "ratePlan": {
                    "id": "MUC-NONREF_DBL",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "Non Refundable",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-SGL",
                    "code": "SGL",
                    "name": "Standard",
                    "description": "Standard"
                  },
                  "unit": {
                    "id": "MUC-MTA",
                    "name": "A.101",
                    "description": "Standard room."
                  },
                  "baseAmount": {
                    "grossAmount": 65.0,
                    "netAmount": 60.75,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 86.0,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-BRKF",
                        "code": "BRKF",
                        "name": "Breakfast",
                        "description": "Best breakfast on this side of the Weißwurstäquator."
                      },
                      "serviceDate": "2021-05-23",
                      "count": 0,
                      "amount": {
                        "grossAmount": 9.99,
                        "netAmount": 8.39,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false
                    }
                  ]
                }
              ],
              "company": {
                "id": "MUC-UMBRELLA",
                "code": "UMBRELLA",
                "name": "Umbrella Corp.",
                "canCheckOutOnAr": false
              },
              "corporateCode": "UMBRELLA-DBL",
              "allFoliosHaveInvoice": false,
              "hasCityTax": false
            },
            {
              "id": "APFDRQSX-1",
              "bookingId": "APFDRQSX",
              "status": "CheckedOut",
              "property": {
                "id": "MUC",
                "code": "MUC",
                "name": "Demo Hotel Munich",
                "description": "This is the demo hotel Munich"
              },
              "ratePlan": {
                "id": "MUC-FLEX-DBL",
                "code": "FLEX",
                "name": "Flexible",
                "description": "Flexible",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-DBL",
                "code": "DBL",
                "name": "Double",
                "description": "Double"
              },
              "unit": {
                "id": "MUC-JQI",
                "name": "A.201",
                "description": "Standard room."
              },
              "totalGrossAmount": {
                "amount": 120.0,
                "currency": "EUR"
              },
              "arrival": "2021-05-26T16:41:01.1149858+02:00",
              "departure": "2021-05-28T16:41:01.1149858+02:00",
              "created": "2021-05-21T16:41:01.1149858+02:00",
              "modified": "2021-05-21T16:41:01.1149858+02:00",
              "adults": 1,
              "childrenAges": [
                6
              ],
              "channelCode": "Direct",
              "primaryGuest": {
                "title": "Ms",
                "gender": "Female",
                "firstName": "Jane",
                "middleInitial": "D",
                "lastName": "Doe",
                "email": "jane.d@doe.com",
                "phone": "+4989123789",
                "address": {
                  "addressLine1": "My Street 5",
                  "postalCode": "12453",
                  "city": "MyCity",
                  "countryCode": "GB"
                }
              },
              "guaranteeType": "CreditCard",
              "cancellationFee": {
                "id": "MUC-FLEX",
                "code": "FLEX",
                "name": "Flexible",
                "description": "Free cancellation.",
                "dueDateTime": "2021-05-23T17:00:00+02:00",
                "fee": {
                  "amount": 120.0,
                  "currency": "EUR"
                }
              },
              "noShowFee": {
                "id": "MUC-NOSHOW",
                "code": "NOSHOW",
                "name": "Non Refundable",
                "description": "No free no-show",
                "fee": {
                  "amount": 120.0,
                  "currency": "EUR"
                }
              },
              "timeSlices": [
                {
                  "from": "2021-05-26T16:41:01.1149858+02:00",
                  "to": "2021-05-27T16:41:01.1149858+02:00",
                  "serviceDate": "2021-05-26",
                  "ratePlan": {
                    "id": "MUC-FLEX-DBL",
                    "code": "FLEX",
                    "name": "Flexible",
                    "description": "Flexible",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double"
                  },
                  "unit": {
                    "id": "MUC-JQI",
                    "name": "A.201",
                    "description": "Standard room."
                  },
                  "baseAmount": {
                    "grossAmount": 65.0,
                    "netAmount": 60.75,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 86.0,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-BRKF",
                        "code": "BRKF",
                        "name": "Breakfast",
                        "description": "Best breakfast on this side of the Weißwurstäquator."
                      },
                      "serviceDate": "2021-05-26",
                      "count": 0,
                      "amount": {
                        "grossAmount": 9.99,
                        "netAmount": 8.39,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false
                    }
                  ]
                },
                {
                  "from": "2021-05-27T16:41:01.1149858+02:00",
                  "to": "2021-05-28T16:41:01.1149858+02:00",
                  "serviceDate": "2021-05-27",
                  "ratePlan": {
                    "id": "MUC-FLEX-DBL",
                    "code": "FLEX",
                    "name": "Flexible",
                    "description": "Flexible",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double"
                  },
                  "unit": {
                    "id": "MUC-JQI",
                    "name": "A.201",
                    "description": "Standard room."
                  },
                  "baseAmount": {
                    "grossAmount": 65.0,
                    "netAmount": 60.75,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 86.0,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-BRKF",
                        "code": "BRKF",
                        "name": "Breakfast",
                        "description": "Best breakfast on this side of the Weißwurstäquator."
                      },
                      "serviceDate": "2021-05-27",
                      "count": 0,
                      "amount": {
                        "grossAmount": 9.99,
                        "netAmount": 8.39,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false
                    }
                  ]
                }
              ],
              "validationMessages": [
                {
                  "category": "OfferNotAvailable",
                  "code": "RatePlanRestrictionsViolated",
                  "message": "The restrictions of the rate plan are not considered"
                }
              ],
              "allFoliosHaveInvoice": false,
              "hasCityTax": false,
              "commission": {
                "commissionAmount": {
                  "amount": 10.0,
                  "currency": "EUR"
                },
                "beforeCommissionAmount": {
                  "amount": 100.0,
                  "currency": "EUR"
                }
              }
            }
          ],
          "count": 0
        }
      properties:
        reservations:
          description: List of reservations
          items:
            $ref: '#/components/schemas/ReservationItemModel'
          type: array
        count:
          description: Total count of items
          format: int64
          type: integer
      required:
      - count
      - reservations
      type: object
    PayableAmountModel:
      properties:
        guest:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - guest
      type: object
    ReservationModel:
      example: |-
        {
          "id": "XPGMSXGF-1",
          "bookingId": "XPGMSXGF",
          "status": "Confirmed",
          "unit": {
            "id": "MUC-MTA",
            "name": "A.101",
            "description": "Standard room."
          },
          "property": {
            "id": "MUC",
            "code": "MUC",
            "name": "Demo Hotel Munich",
            "description": "This is the demo hotel Munich"
          },
          "ratePlan": {
            "id": "MUC-NONREF_DBL",
            "code": "NONREF",
            "name": "Non Refundable",
            "description": "Non Refundable",
            "isSubjectToCityTax": false
          },
          "unitGroup": {
            "id": "MUC-SGL",
            "code": "SGL",
            "name": "Standard",
            "description": "Standard"
          },
          "totalGrossAmount": {
            "amount": 222.0,
            "currency": "EUR"
          },
          "arrival": "2021-05-23T17:00:00+02:00",
          "departure": "2021-05-25T11:00:00+02:00",
          "created": "2021-05-21T16:41:01.1149858+02:00",
          "modified": "2021-05-21T16:41:01.1149858+02:00",
          "adults": 1,
          "childrenAges": [
            6
          ],
          "externalCode": "812864414|369",
          "channelCode": "BookingCom",
          "primaryGuest": {
            "title": "Mr",
            "gender": "Male",
            "firstName": "Jon",
            "middleInitial": "D",
            "lastName": "Doe",
            "email": "john.d@doe.com",
            "phone": "+4989123343",
            "address": {
              "addressLine1": "My Street 5",
              "postalCode": "12453",
              "city": "MyCity",
              "countryCode": "GB"
            }
          },
          "paymentAccount": {
            "accountNumber": "1111",
            "accountHolder": "John Doe",
            "expiryMonth": "8",
            "expiryYear": "2018",
            "paymentMethod": "visa",
            "payerEmail": "s.hopper@test.com",
            "isVirtual": false,
            "isActive": false
          },
          "timeSlices": [
            {
              "from": "2021-05-23T17:00:00+02:00",
              "to": "2021-05-24T11:00:00+02:00",
              "serviceDate": "2021-05-23",
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard"
              },
              "unit": {
                "id": "MUC-MTA",
                "name": "A.101",
                "description": "Standard room."
              },
              "baseAmount": {
                "grossAmount": 65.0,
                "netAmount": 60.75,
                "vatType": "Reduced",
                "vatPercent": 7.0,
                "currency": "EUR"
              },
              "totalGrossAmount": {
                "amount": 86.0,
                "currency": "EUR"
              },
              "includedServices": [
                {
                  "service": {
                    "id": "MUC-BRKF",
                    "code": "BRKF",
                    "name": "Breakfast",
                    "description": "Best breakfast on this side of the Weißwurstäquator."
                  },
                  "serviceDate": "2021-05-24",
                  "count": 0,
                  "amount": {
                    "grossAmount": 9.99,
                    "netAmount": 8.39,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "bookedAsExtra": false
                }
              ]
            },
            {
              "from": "2021-05-24T17:00:00+02:00",
              "to": "2021-05-25T11:00:00+02:00",
              "serviceDate": "2021-05-24",
              "ratePlan": {
                "id": "MUC-NONREF_DBL",
                "code": "NONREF",
                "name": "Non Refundable",
                "description": "Non Refundable",
                "isSubjectToCityTax": false
              },
              "unitGroup": {
                "id": "MUC-SGL",
                "code": "SGL",
                "name": "Standard",
                "description": "Standard"
              },
              "unit": {
                "id": "MUC-MTA",
                "name": "A.101",
                "description": "Standard room."
              },
              "baseAmount": {
                "grossAmount": 91.01,
                "netAmount": 85.06,
                "vatType": "Reduced",
                "vatPercent": 7.0,
                "currency": "EUR"
              },
              "totalGrossAmount": {
                "amount": 101.0,
                "currency": "EUR"
              },
              "includedServices": [
                {
                  "service": {
                    "id": "MUC-BRKF",
                    "code": "BRKF",
                    "name": "Breakfast",
                    "description": "Best breakfast on this side of the Weißwurstäquator."
                  },
                  "serviceDate": "2021-05-25",
                  "count": 0,
                  "amount": {
                    "grossAmount": 9.99,
                    "netAmount": 8.39,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "bookedAsExtra": false
                }
              ]
            }
          ],
          "guaranteeType": "CreditCard",
          "cancellationFee": {
            "id": "MUC-FLEX",
            "code": "FLEX",
            "name": "Flexible",
            "description": "Free cancellation.",
            "dueDateTime": "2021-05-23T17:00:00+02:00",
            "fee": {
              "amount": 202.0,
              "currency": "EUR"
            }
          },
          "noShowFee": {
            "id": "MUC-NOSHOW",
            "code": "NOSHOW",
            "name": "Non Refundable",
            "description": "No free no-show",
            "fee": {
              "amount": 202.0,
              "currency": "EUR"
            }
          },
          "validationMessages": [
            {
              "category": "OfferNotAvailable",
              "code": "RatePlanRestrictionsViolated",
              "message": "The restrictions of the rate plan are not considered"
            }
          ],
          "company": {
            "id": "MUC-UMBRELLA",
            "code": "UMBRELLA",
            "name": "Umbrella Corp.",
            "canCheckOutOnAr": false
          },
          "corporateCode": "UMBRELLA_DBL",
          "allFoliosHaveInvoice": false,
          "hasCityTax": true,
          "commission": {
            "commissionAmount": {
              "amount": 10.0,
              "currency": "EUR"
            },
            "beforeCommissionAmount": {
              "amount": 100.0,
              "currency": "EUR"
            }
          }
        }
      properties:
        id:
          description: Reservation id
          type: string
        bookingId:
          description: Booking id
          type: string
        blockId:
          description: Block id
          type: string
        groupName:
          description: Name of the group
          type: string
        status:
          description: Status of the reservation
          enum:
          - Confirmed
          - InHouse
          - CheckedOut
          - Canceled
          - NoShow
          type: string
          x-ms-enum:
            name: ReservationStatus
            modelAsString: false
        checkInTime:
          description: Time of check-in<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        checkOutTime:
          description: Time of check-out<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        cancellationTime:
          description: Time of cancellation, if the reservation was canceled<br />A
            date and time (without fractional second part) in UTC or with UTC offset
            as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        noShowTime:
          description: Time of setting no-show reservation status<br />A date and
            time (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        unit:
          $ref: '#/components/schemas/EmbeddedUnitModel'
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/EmbeddedUnitGroupModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        arrival:
          description: Date of arrival<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        departure:
          description: Date of departure<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        created:
          description: Date of creation<br />A date and time (without fractional second
            part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        modified:
          description: Date of last modification<br />A date and time (without fractional
            second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        adults:
          description: Number of adults
          format: int32
          type: integer
        childrenAges:
          description: The ages of the children
          items:
            format: int32
            type: integer
          type: array
        comment:
          description: Additional information and comments
          type: string
        guestComment:
          description: Additional information and comment by the guest
          type: string
        externalCode:
          description: Code in external system
          type: string
        channelCode:
          description: Channel code
          enum:
          - Direct
          - BookingCom
          - Ibe
          - ChannelManager
          - Expedia
          - Homelike
          type: string
          x-ms-enum:
            name: ChannelCode
            modelAsString: false
        source:
          description: Source of the reservation (e.g Hotels.com, Orbitz, etc.)
          type: string
        primaryGuest:
          $ref: '#/components/schemas/GuestModel'
        additionalGuests:
          description: Additional guests of the reservation.
          items:
            $ref: '#/components/schemas/GuestModel'
          type: array
        booker:
          $ref: '#/components/schemas/BookerModel'
        paymentAccount:
          $ref: '#/components/schemas/PaymentAccountModel'
        timeSlices:
          description: The list of time slices with the reserved units / unit groups
            for the stay
          items:
            $ref: '#/components/schemas/TimeSliceModel'
          type: array
        services:
          description: The list of additional services (extras, add-ons) reserved
            for the stay
          items:
            $ref: '#/components/schemas/ReservationServiceItemModel'
          type: array
        guaranteeType:
          description: The strongest guarantee for the rate plans booked in this reservation
          enum:
          - PM6Hold
          - CreditCard
          - Prepayment
          - Company
          - Ota
          type: string
          x-ms-enum:
            name: GuaranteeType
            modelAsString: false
        cancellationFee:
          $ref: '#/components/schemas/ReservationCancellationFeeModel'
        noShowFee:
          $ref: '#/components/schemas/ReservationNoShowFeeModel'
        travelPurpose:
          description: The purpose of the trip, leisure or business
          enum:
          - Business
          - Leisure
          type: string
          x-ms-enum:
            name: TravelPurpose
            modelAsString: false
        balance:
          $ref: '#/components/schemas/MonetaryValueModel'
        assignedUnits:
          description: The list of units assigned to this reservation
          items:
            $ref: '#/components/schemas/ReservationAssignedUnitModel'
          type: array
        validationMessages:
          description: "Validation rules are applied to reservations during their\
            \ lifetime.\r\nFor example a reservation that was created while the house\
            \ or unit group is already fully booked.\r\nWhenever a rule was or is\
            \ currently violated, a validation message will be added to this list.\r\
            \nThey can be deleted whenever the hotel staff worked them off."
          items:
            $ref: '#/components/schemas/ReservationValidationMessageModel'
          type: array
        actions:
          description: The list of actions for this reservation
          items:
            $ref: '#/components/schemas/ActionModel[ReservationAction,NotAllowedReservationActionReason]'
          type: array
        company:
          $ref: '#/components/schemas/EmbeddedCompanyModel'
        corporateCode:
          description: Corporate code provided during creation. Used to find offers
            during amend.
          type: string
        allFoliosHaveInvoice:
          description: Whether all folios of a reservation have an invoice
          type: boolean
        taxDetails:
          description: Tax breakdown, displaying net and tax amount for each VAT type
          items:
            $ref: '#/components/schemas/TaxDetailModel'
          type: array
        hasCityTax:
          description: Whether the city tax has already been added to the reservation.
            Set to false, if the property does not have city tax configured
          type: boolean
        commission:
          $ref: '#/components/schemas/CommissionModel'
        promoCode:
          description: The promo code associated with a certain special offer used
            to create the reservation
          type: string
        payableAmount:
          $ref: '#/components/schemas/PayableAmountModel'
      required:
      - adults
      - arrival
      - balance
      - bookingId
      - cancellationFee
      - channelCode
      - created
      - departure
      - guaranteeType
      - hasCityTax
      - id
      - modified
      - noShowFee
      - payableAmount
      - property
      - ratePlan
      - status
      - taxDetails
      - totalGrossAmount
      - unitGroup
      type: object
    ReservationStayOfferServiceModel:
      properties:
        service:
          $ref: '#/components/schemas/EmbeddedServiceModel'
        serviceDate:
          description: The date this service is delivered
          example: 2020-10-10
          format: date
          type: string
        count:
          description: The default count of offered services. For services whose pricing
            unit is 'Person' it will be based on the adults and children specified,
            otherwise 1.
          format: int32
          type: integer
        amount:
          $ref: '#/components/schemas/AmountModel'
        bookedAsExtra:
          description: Whether this service is already booked as extra
          type: boolean
        pricingMode:
          description: Whether the service price is included in or added to the base
            rate
          enum:
          - Included
          - Additional
          type: string
          x-ms-enum:
            name: PricingMode
            modelAsString: false
      required:
      - amount
      - bookedAsExtra
      - count
      - pricingMode
      - service
      - serviceDate
      type: object
    ReservationStayOfferTimeSliceModel:
      properties:
        from:
          description: The start date and time for this time slice<br />A date and
            time (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: The end date and time for this time slice<br />A date and time
            (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        ratePlan:
          $ref: '#/components/schemas/EmbeddedRatePlanModel'
        unitGroup:
          $ref: '#/components/schemas/OfferUnitGroupModel'
        baseAmount:
          $ref: '#/components/schemas/AmountModel'
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        includedServices:
          description: The breakdown for services included in the offer
          items:
            $ref: '#/components/schemas/ReservationStayOfferServiceModel'
          type: array
      required:
      - baseAmount
      - from
      - ratePlan
      - to
      - totalGrossAmount
      - unitGroup
      type: object
    ReservationStayOfferModel:
      properties:
        arrival:
          description: The earliest arrival date and time for this offer<br />A date
            and time (without fractional second part) in UTC or with UTC offset as
            defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        departure:
          description: The latest departure date and time for this offer<br />A date
            and time (without fractional second part) in UTC or with UTC offset as
            defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        minGuaranteeType:
          description: The minimum guarantee type for this offer
          enum:
          - PM6Hold
          - CreditCard
          - Prepayment
          - Company
          type: string
          x-ms-enum:
            name: MinGuaranteeType
            modelAsString: false
        availableUnits:
          description: The number of available units for that offer
          format: int32
          type: integer
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
        cancellationFee:
          $ref: '#/components/schemas/OfferCancellationFeeModel'
        noShowFee:
          $ref: '#/components/schemas/OfferNoShowFeeModel'
        timeSlices:
          description: The breakdown for each time slice for this offer
          items:
            $ref: '#/components/schemas/ReservationStayOfferTimeSliceModel'
          type: array
        services:
          description: The breakdown for extra services reserved for this offer
          items:
            $ref: '#/components/schemas/ServiceOfferModel'
          type: array
        taxDetails:
          description: Tax breakdown, displaying net and tax amount for each VAT type
          items:
            $ref: '#/components/schemas/TaxDetailModel'
          type: array
        validationMessages:
          description: Validation rules that were applied to the offer and show the
            reason why the offer is not bookable
          items:
            $ref: '#/components/schemas/OfferValidationMessageModel'
          type: array
        companyId:
          description: ID of the company the offer is created for
          type: string
        corporateCode:
          description: The corporate rate code the offer is created for
          type: string
        isCorporate:
          description: Whether the offer is for a corporate rate plan
          type: boolean
        cityTax:
          $ref: '#/components/schemas/AmountModel'
      required:
      - arrival
      - availableUnits
      - cancellationFee
      - departure
      - isCorporate
      - minGuaranteeType
      - noShowFee
      - taxDetails
      - timeSlices
      - totalGrossAmount
      type: object
    ReservationStayOffersModel:
      example: |-
        {
          "property": {
            "id": "MUC",
            "code": "MUC",
            "name": "Demo Hotel Munich",
            "description": "This is the demo hotel Munich"
          },
          "offers": [
            {
              "arrival": "2021-05-23T17:00:00+02:00",
              "departure": "2021-05-25T11:00:00+02:00",
              "minGuaranteeType": "PM6Hold",
              "availableUnits": 4,
              "totalGrossAmount": {
                "amount": 214.0,
                "currency": "EUR"
              },
              "timeSlices": [
                {
                  "from": "2021-05-23T17:00:00+02:00",
                  "to": "2021-05-24T11:00:00+02:00",
                  "ratePlan": {
                    "id": "MUC-FLEX-DBL",
                    "code": "FLEX",
                    "name": "Flexible",
                    "description": "Flexible",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double",
                    "maxPersons": 2,
                    "rank": 1
                  },
                  "baseAmount": {
                    "grossAmount": 40.00,
                    "netAmount": 37.38,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 50.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false,
                      "pricingMode": "Included"
                    }
                  ]
                },
                {
                  "from": "2021-05-24T11:00:00+02:00",
                  "to": "2021-05-25T11:00:00+02:00",
                  "ratePlan": {
                    "id": "MUC-NONREF_DBL",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "Non Refundable",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-SGL",
                    "code": "SGL",
                    "name": "Standard",
                    "description": "Standard",
                    "maxPersons": 1,
                    "rank": 2
                  },
                  "baseAmount": {
                    "grossAmount": 59.00,
                    "netAmount": 55.14,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 69.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false,
                      "pricingMode": "Included"
                    },
                    {
                      "service": {
                        "id": "MUC-CLEANING"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 25.0,
                        "netAmount": 21.0,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false,
                      "pricingMode": "Additional"
                    }
                  ]
                }
              ],
              "services": [
                {
                  "service": {
                    "id": "MUC-BRKF",
                    "code": "BRKF",
                    "name": "Breakfast",
                    "description": "Best breakfast on this side of the Weißwurstäquator.",
                    "pricingUnit": "Person",
                    "defaultGrossPrice": {
                      "amount": 10.0,
                      "currency": "EUR"
                    }
                  },
                  "count": 1,
                  "totalAmount": {
                    "grossAmount": 11.9,
                    "netAmount": 10.0,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "dates": [
                    {
                      "serviceDate": "2021-05-24",
                      "amount": {
                        "grossAmount": 11.9,
                        "netAmount": 10.0,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "isDefaultDate": false,
                      "isMandatory": false
                    }
                  ]
                }
              ],
              "taxDetails": [
                {
                  "vatType": "Normal",
                  "vatPercent": 14.0,
                  "net": {
                    "amount": 200.0,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 14.0,
                    "currency": "EUR"
                  }
                }
              ],
              "isCorporate": false
            },
            {
              "arrival": "2021-05-23T17:00:00+02:00",
              "departure": "2021-05-25T11:00:00+02:00",
              "minGuaranteeType": "PM6Hold",
              "availableUnits": 8,
              "totalGrossAmount": {
                "amount": 214.0,
                "currency": "EUR"
              },
              "timeSlices": [
                {
                  "from": "2021-05-23T17:00:00+02:00",
                  "to": "2021-05-24T11:00:00+02:00",
                  "ratePlan": {
                    "id": "MUC-FLEX-DBL",
                    "code": "FLEX",
                    "name": "Flexible",
                    "description": "Flexible",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-DBL",
                    "code": "DBL",
                    "name": "Double",
                    "description": "Double",
                    "maxPersons": 2,
                    "rank": 1
                  },
                  "baseAmount": {
                    "grossAmount": 90.00,
                    "netAmount": 84.11,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 100.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false,
                      "pricingMode": "Included"
                    }
                  ]
                },
                {
                  "from": "2021-05-24T11:00:00+02:00",
                  "to": "2021-05-25T11:00:00+02:00",
                  "ratePlan": {
                    "id": "MUC-NONREF_DBL",
                    "code": "NONREF",
                    "name": "Non Refundable",
                    "description": "Non Refundable",
                    "isSubjectToCityTax": false
                  },
                  "unitGroup": {
                    "id": "MUC-SGL",
                    "code": "SGL",
                    "name": "Standard",
                    "description": "Standard",
                    "maxPersons": 1,
                    "rank": 2
                  },
                  "baseAmount": {
                    "grossAmount": 124.00,
                    "netAmount": 115.89,
                    "vatType": "Reduced",
                    "vatPercent": 7.0,
                    "currency": "EUR"
                  },
                  "totalGrossAmount": {
                    "amount": 134.00,
                    "currency": "EUR"
                  },
                  "includedServices": [
                    {
                      "service": {
                        "id": "MUC-WLAN"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 10.0,
                        "netAmount": 8.4,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false,
                      "pricingMode": "Included"
                    },
                    {
                      "service": {
                        "id": "MUC-CLEANING"
                      },
                      "serviceDate": "2021-05-23",
                      "count": 1,
                      "amount": {
                        "grossAmount": 25.0,
                        "netAmount": 21.0,
                        "vatType": "Normal",
                        "vatPercent": 19.0,
                        "currency": "EUR"
                      },
                      "bookedAsExtra": false,
                      "pricingMode": "Additional"
                    }
                  ]
                }
              ],
              "taxDetails": [
                {
                  "vatType": "Reduced",
                  "vatPercent": 14.0,
                  "net": {
                    "amount": 100.0,
                    "currency": "EUR"
                  },
                  "tax": {
                    "amount": 14.0,
                    "currency": "EUR"
                  }
                }
              ],
              "isCorporate": false
            }
          ]
        }
      properties:
        property:
          $ref: '#/components/schemas/EmbeddedPropertyModel'
        offers:
          description: List of offered unit groups with rates
          items:
            $ref: '#/components/schemas/ReservationStayOfferModel'
          type: array
      required:
      - offers
      - property
      type: object
    ReservationServiceListModel:
      example: |-
        {
          "services": [
            {
              "service": {
                "id": "MUC-YOGA",
                "code": "YOGA",
                "name": "Sun Salutation",
                "description": "Start the day with a private Yoga session with one of our certified trainers.",
                "pricingUnit": "Person",
                "defaultGrossPrice": {
                  "amount": 35.0,
                  "currency": "EUR"
                }
              },
              "totalAmount": {
                "grossAmount": 30.0,
                "netAmount": 25.0,
                "vatType": "Normal",
                "vatPercent": 19.0,
                "currency": "EUR"
              },
              "dates": [
                {
                  "serviceDate": "2021-05-21",
                  "count": 1,
                  "amount": {
                    "grossAmount": 30.0,
                    "netAmount": 25.0,
                    "vatType": "Normal",
                    "vatPercent": 19.0,
                    "currency": "EUR"
                  },
                  "isMandatory": false
                }
              ]
            }
          ],
          "count": 1
        }
      properties:
        services:
          description: The list of services booked for the reservation
          items:
            $ref: '#/components/schemas/ReservationServiceItemModel'
          type: array
        count:
          description: Total count of items
          format: int64
          type: integer
      required:
      - count
      - services
      type: object
    AutoAssignedUnitItemModel:
      properties:
        unit:
          $ref: '#/components/schemas/EmbeddedUnitModel'
        from:
          description: The start date and time for this time slice<br />A date and
            time (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
        to:
          description: The end date and time for this time slice<br />A date and time
            (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          format: date-time
          type: string
      required:
      - from
      - to
      - unit
      type: object
    AutoAssignedUnitListModel:
      example: |-
        {
          "timeSlices": [
            {
              "unit": {
                "id": "MUC-JQI",
                "name": "A.201",
                "description": "Standard room."
              },
              "from": "2021-05-21T17:00:00+02:00",
              "to": "2021-05-22T11:00:00+02:00"
            },
            {
              "unit": {
                "id": "MUC-MTA",
                "name": "A.101",
                "description": "Standard room."
              },
              "from": "2021-05-22T17:00:00+02:00",
              "to": "2021-05-23T11:00:00+02:00"
            }
          ]
        }
      properties:
        timeSlices:
          description: The list of time slices with the respective assigned unit
          items:
            $ref: '#/components/schemas/AutoAssignedUnitItemModel'
          type: array
      required:
      - timeSlices
      type: object
    AssignedUnitModel:
      example: |-
        {
          "unit": {
            "id": "MUC-JQI",
            "name": "A.201",
            "description": "Standard room."
          }
        }
      properties:
        unit:
          $ref: '#/components/schemas/EmbeddedUnitModel'
      required:
      - unit
      type: object
    DesiredTimeSliceModel:
      properties:
        ratePlanId:
          description: The rate plan id for this time slice
          type: string
        totalGrossAmount:
          $ref: '#/components/schemas/MonetaryValueModel'
      required:
      - ratePlanId
      type: object
    DesiredStayDetailsModel:
      example: |-
        {
          "arrival": "2021-05-23T17:00:00+02:00",
          "departure": "2021-05-25T11:00:00+02:00",
          "adults": 1,
          "childrenAges": [
            6
          ],
          "requote": false,
          "timeSlices": [
            {
              "ratePlanId": "MUC-NONREF-DBL",
              "totalGrossAmount": {
                "amount": 86.00,
                "currency": "EUR"
              }
            },
            {
              "ratePlanId": "MUC-NONREF-DBL",
              "totalGrossAmount": {
                "amount": 101.00,
                "currency": "EUR"
              }
            }
          ]
        }
      properties:
        arrival:
          description: Date and optional time of arrival<br />Specify either a pure
            date or a date and time (without fractional second part) in UTC or with
            UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        departure:
          description: Date and optional time of departure. Cannot be more than 5
            years after arrival.<br />Specify either a pure date or a date and time
            (without fractional second part) in UTC or with UTC offset as defined
            in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
          type: string
        adults:
          description: Number of adults
          format: int32
          type: integer
        childrenAges:
          description: Ages of the children
          items:
            format: int32
            type: integer
          type: array
        requote:
          description: "Whether the prices for time slices with no change to the rate\
            \ plan should be re-quoted based on current prices, or if\r\nonly additions\
            \ like change of number of adults should be calculated. Defaults to 'false'."
          type: boolean
        timeSlices:
          description: The list of time slices
          items:
            $ref: '#/components/schemas/DesiredTimeSliceModel'
          type: array
      required:
      - adults
      - arrival
      - departure
      - timeSlices
      type: object
    SourceListModel:
      example: |-
        {
          "sources": [
            "Booking.com",
            "Expedia"
          ]
        }
      properties:
        sources:
          description: List of sources.
          items:
            type: string
          type: array
      required:
      - sources
      type: object
  securitySchemes:
    oauth2:
      flows:
        implicit:
          authorizationUrl: https://identity.apaleo.com/connect/authorize
          scopes:
            admin: Full access
            reservations.import: Import reservations
      type: oauth2
x-original-swagger-version: "2.0"
